// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name Hestia
import CryptoSwift
import Foundation
@_exported import Hestia
import Kingfisher
import Swift
import SwiftyJSON
import TekCoreNetwork
import TekCoreService
import TerraInstancesManager
import UIKit
public protocol HestiaDelegate {
  func callback(data: [Swift.String : Any])
}
public enum AppType : Swift.String {
  case reactNative
  case native
  case webView
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public class HestiaGenerator : TerraInstancesManager.InstanceGeneratable {
  public typealias InstanceType = HestiaCore
  required public init()
  public func generateInstance(app: TerraInstancesManager.ITerraApp) -> HestiaCore?
  public func generateDefaultInstance(config: HestiaConfig) -> HestiaCore
  public func generateDefaultInstance(config: [Swift.String : Any]) -> HestiaCore
  @objc deinit
}
@_hasMissingDesignatedInitializers public class HestiaSingleton : TerraInstancesManager.InstancesManageable {
  public typealias Generator = HestiaGenerator
  public static var shared: HestiaSingleton
  public var instances: [Swift.String : HestiaCore]
  public static var DEFAULT_VALUE: Swift.String
  public var `default`: HestiaCore {
    get
  }
  public func configureWith(config: HestiaConfig)
  public func configureWith(config: [Swift.String : Any])
  public func configureWith(app: TerraInstancesManager.ITerraApp)
  @objc deinit
}
public var TerraHestia: HestiaSingleton
public protocol NeedHestiaService {
  func withHestiaService(hestiaService: HestiaService)
}
public struct AnyHestiaAppManifest : HestiaAppManifest {
  public typealias DataType = HestiaManifestData
  public init<Base>(_ base: Base) where Base : HestiaAppManifest
  public var base: Any {
    get
  }
  public var data: HestiaManifestData? {
    get
  }
  public var extra: [Swift.String : Any]? {
    get
  }
}
public class AppLauncherData {
  public var idToken: Swift.String?
  public var accessToken: Swift.String?
  public var refreshToken: Swift.String?
  public var extraConfig: [Swift.String : Any]
  public init(idToken: Swift.String?, accessToken: Swift.String?, refreshToken: Swift.String?, extraConfig: [Swift.String : Any])
  @objc deinit
}
public protocol AppLauncherDelegate {
  var appType: AppType { get }
  func startApp(onViewController hostViewController: UIKit.UIViewController, hostAppName: Swift.String, app: HestiaApp, delegate: HestiaDelegate?, onSuccess: @escaping () -> Swift.Void, onFailure: @escaping (HestiaError) -> Swift.Void)
}
public protocol AppLauncherDelegateFactory {
  init()
  func create() -> AppLauncherDelegate
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class WebAppManifestData : HestiaManifestData {
  public var url: Swift.String
  @objc deinit
}
public protocol HestiaAppManifest {
  associatedtype DataType : HestiaManifestData
  var data: Self.DataType? { get }
  var extra: [Swift.String : Any]? { get }
}
public struct AssetDetail : Swift.Decodable {
  public var name: Swift.String
  public var content: Swift.String
  public var type: Swift.String
  public var checksum: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers public class HestiaService : TekCoreService.BaseService<TekCoreService.APIManager> {
  public func fetchApplicationList(clientId: Swift.String, completion: @escaping (Swift.Result<[HestiaApp], HestiaError>) -> ())
  public func fetchApplicationManifest(clientId: Swift.String, appCode: Swift.String, completion: @escaping (Swift.Result<HestiaApp, HestiaError>) -> ())
  public func fetchAssetList(clientId: Swift.String, appCode: Swift.String, completion: @escaping (Swift.Result<[AssetDetail], HestiaError>) -> ())
  @objc deinit
  override public init(url: Foundation.URL, credential: TekCoreService.ServicesCredential? = super, errorDelegate: TekCoreService.ServicesErrorDelegate? = super)
}
public protocol HestiaApplication {
  func open(_ viewController: UIKit.UIViewController)
}
extension HestiaApplication where Self : UIKit.UIApplication {
  public func open(_ viewController: UIKit.UIViewController)
}
extension HestiaApplication where Self : UIKit.UIViewController {
  public func open(_ viewController: UIKit.UIViewController)
}
@_hasMissingDesignatedInitializers public class HestiaCore {
  public static var configName: Swift.String
  @objc deinit
}
extension HestiaCore {
  public static func configure(appName: Swift.String = HestiaSingleton.DEFAULT_VALUE, config: HestiaConfig) -> HestiaCore
  public static func configure(appName: Swift.String = HestiaSingleton.DEFAULT_VALUE, config: [Swift.String : Any]) -> HestiaCore
  public static func configure(app: TerraInstancesManager.ITerraApp) -> HestiaCore
}
extension HestiaCore {
  public func fetchApplicationList(completion: @escaping (Swift.Result<[HestiaApp], HestiaError>) -> Swift.Void)
  public func fetchApplicationManifest(appCode: Swift.String, completion: @escaping (Swift.Result<HestiaApp, HestiaError>) -> Swift.Void)
  public func fetchAssetList(appCode: Swift.String, completion: @escaping (Swift.Result<[AssetDetail], HestiaError>) -> Swift.Void)
  public func startApp(onViewController hostViewController: UIKit.UIViewController, appCode: Swift.String, delegate: HestiaDelegate? = nil, onSuccess: @escaping () -> (), onFailure: @escaping (HestiaError) -> Swift.Void)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class IOSNativeManifestData : HestiaManifestData {
  public var mainClass: Swift.String
  public var initClass: Swift.String
  @objc deinit
}
public class HestiaApp : Swift.Decodable {
  final public let name: Swift.String
  final public let description: Swift.String
  final public let code: Swift.String
  final public let productCode: Swift.String
  final public let platformCode: Swift.String
  final public let platformName: Swift.String
  final public let version: Swift.String
  public var manifest: AnyHestiaAppManifest?
  public var type: AppType
  public var configString: Swift.String
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ReactNativeAppManifest : HestiaAppManifest, Swift.Decodable {
  public typealias DataType = ReactNativeAppManifestData
  final public let data: ReactNativeAppManifestData?
  final public let extra: [Swift.String : Any]?
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IOSAppManifest : HestiaAppManifest, Swift.Decodable {
  public typealias DataType = IOSNativeManifestData
  final public let data: IOSNativeManifestData?
  final public let extra: [Swift.String : Any]?
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
public enum HestiaError : Swift.String, Swift.Error {
  case invalidCode
  case appNotFound
  case unexpected
  case exchangeTokenFailed
  case invalidManifestData
  case applicationNotInit
  case assetsNotFound
  case invalidAssetFormat
  case connectorNotIntegrated
  case clientIdNotConfigured
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public protocol MiniAppListDelegate : AnyObject {
  func didSelectApp(appList: MiniAppList, appCode: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class MiniAppList : UIKit.UICollectionViewController, UIKit.UICollectionViewDelegateFlowLayout {
  public var appName: Swift.String
  weak public var delegate: MiniAppListDelegate?
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc override dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumLineSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
  @objc override dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc deinit
  @objc override dynamic public init(collectionViewLayout layout: UIKit.UICollectionViewLayout)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension MiniAppList : HestiaDelegate {
  public func callback(data: [Swift.String : Any])
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ReactNativeAppManifestData : HestiaManifestData {
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
public struct Asset : Swift.Codable {
  public var id: Swift.String
  public var name: Swift.String
  public var type: Swift.String
  public var checksum: Swift.String
  public var createdAt: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct HestiaConfig {
  public var url: Swift.String
  public var clientId: Swift.String
  public init(url: Swift.String, clientId: Swift.String)
}
public class HestiaManifestData : Swift.Decodable {
  public var type: Swift.String
  public var iamAudience: Swift.String
  required public init(from decoder: Swift.Decoder) throws
  public init(from dict: [Swift.String : Any])
  @objc deinit
}
public protocol AppViewController {
  init()
  func setUp(launcherData: AppLauncherData?, application: HestiaApplication)
}
@_hasMissingDesignatedInitializers public class Runtime {
  public static func allClasses() -> [Swift.AnyClass]
  public static func subclasses(of class: Swift.AnyClass) -> [Swift.AnyClass]
  public static func classes(conformToProtocol protocol: ObjectiveC.`Protocol`) -> [Swift.AnyClass]
  public static func classes<T>(conformTo: T.Type) -> [Swift.AnyClass]
  @objc deinit
}
@_inheritsConvenienceInitializers public class HestiaConfigConverter : TekCoreService.BaseServiceConverter<HestiaConfig> {
  override public func convertConfig(rawValue: [Swift.String : Any]) -> HestiaConfig
  @objc deinit
  required public init(input: [Swift.String : Any])
}
public protocol NeedClientId {
  func withClientId(clientId: Swift.String)
}
@_hasMissingDesignatedInitializers public class WebAppManifest : HestiaAppManifest, Swift.Decodable {
  public typealias DataType = WebAppManifestData
  final public let data: WebAppManifestData?
  final public let extra: [Swift.String : Any]?
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
