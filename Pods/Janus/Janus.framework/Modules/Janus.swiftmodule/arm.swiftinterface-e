// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name Janus
import AuthenticationServices
import FacebookCore
import FacebookLogin
import Foundation
import GoogleSignIn
@_exported import Janus
import Security
import Swift
import SwiftyJSON
import TekCoreNetwork
import TekCoreService
import TerraInstancesManager
import UIKit
public protocol JanusAuthManagerDelegate : AnyObject {
  func janusDidUpdateAuthInfo()
  func janusDidClearAuthInfo()
}
@_inheritsConvenienceInitializers public class FacebookLoginMethod : Janus.SocialLoginMethod {
  override public var type: Janus.JanusLoginType {
    get
  }
  @objc deinit
  override public init(name: Swift.String = super, appId: Swift.String, grantType: Swift.String, authorizer: Swift.String)
  override public init(dict: [Swift.String : Any])
}
public struct KeychainSwiftConstants {
  public static var accessGroup: Swift.String {
    get
  }
  public static var accessible: Swift.String {
    get
  }
  public static var attrAccount: Swift.String {
    get
  }
  public static var attrSynchronizable: Swift.String {
    get
  }
  public static var klass: Swift.String {
    get
  }
  public static var matchLimit: Swift.String {
    get
  }
  public static var returnData: Swift.String {
    get
  }
  public static var valueData: Swift.String {
    get
  }
  public static var returnReference: Swift.String {
    get
  }
  public static var returnAttributes: Swift.String {
    get
  }
  public static var secMatchLimitAll: Swift.String {
    get
  }
}
public protocol JanusLoginDelegate : AnyObject {
  func janusWillGetAuthCredential()
  func janusHasLoginSuccess(authCredential: Janus.JanusAuthCredential)
  func janusHasLoginFail(error: Janus.JanusError?)
}
public protocol JanusLoginMethod {
  var type: Janus.JanusLoginType { get }
  var name: Swift.String { get }
  var grantType: Swift.String { get }
  func register()
}
extension JanusLoginMethod {
  public var code: Swift.String {
    get
  }
}
public protocol JanusCredential : AnyObject {
  var type: Janus.JanusLoginType { get }
  var delegate: Janus.JanusLoginDelegate? { get set }
}
public class PasswordlessCredential {
  public var phone: Swift.String
  public var pin: Swift.String?
  public var type: Janus.JanusLoginType
  weak public var delegate: Janus.JanusLoginDelegate?
  public init(phone: Swift.String, pin: Swift.String)
  @objc deinit
}
public enum KeychainSwiftAccessOptions {
  case accessibleWhenUnlocked
  case accessibleWhenUnlockedThisDeviceOnly
  case accessibleAfterFirstUnlock
  case accessibleAfterFirstUnlockThisDeviceOnly
  case accessibleWhenPasscodeSetThisDeviceOnly
  public static func == (a: Janus.KeychainSwiftAccessOptions, b: Janus.KeychainSwiftAccessOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_inheritsConvenienceInitializers public class GoogleLoginMethod : Janus.SocialLoginMethod {
  override public var type: Janus.JanusLoginType {
    get
  }
  override public func register()
  @objc deinit
  override public init(name: Swift.String = super, appId: Swift.String, grantType: Swift.String, authorizer: Swift.String)
  override public init(dict: [Swift.String : Any])
}
public class SocialLoginMethod : Janus.BaseLoginMethod, Janus.AuthorizerHoldable {
  override public var type: Janus.JanusLoginType {
    get
  }
  public var authorizer: Swift.String {
    get
  }
  public var appId: Swift.String {
    get
  }
  public init(name: Swift.String = "", appId: Swift.String, grantType: Swift.String, authorizer: Swift.String)
  override public init(dict: [Swift.String : Any])
  override public func register()
  override public init(name: Swift.String = super, grantType: Swift.String)
  @objc deinit
}
public class BaseLoginMethod : Janus.JanusLoginMethod {
  public var type: Janus.JanusLoginType {
    get
  }
  public var grantType: Swift.String {
    get
  }
  public var name: Swift.String {
    get
  }
  public init(name: Swift.String = "", grantType: Swift.String)
  public init(dict: [Swift.String : Any])
  public func register()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PhoneAuthProvider {
  public func requestOTP(phone: Swift.String, completion: @escaping (Swift.Bool, Swift.Int?) -> Swift.Void)
  public func createPasswordlessLogin(pin: Swift.String) -> Janus.PasswordlessCredential?
  @objc deinit
}
@_inheritsConvenienceInitializers public class AppleLoginMethod : Janus.SocialLoginMethod {
  override public var type: Janus.JanusLoginType {
    get
  }
  @objc deinit
  override public init(name: Swift.String = super, appId: Swift.String, grantType: Swift.String, authorizer: Swift.String)
  override public init(dict: [Swift.String : Any])
}
@_inheritsConvenienceInitializers public class PasswordlessLoginMethod : Janus.BaseLoginMethod {
  override public var type: Janus.JanusLoginType {
    get
  }
  @objc deinit
  override public init(name: Swift.String = super, grantType: Swift.String)
  override public init(dict: [Swift.String : Any])
}
public class FacebookLoginUI {
  weak public var delegate: Janus.JanusLoginDelegate?
  public var type: Janus.JanusLoginType {
    get
  }
  public init(presentViewController: UIKit.UIViewController, delegate: Janus.JanusLoginDelegate?)
  @objc deinit
}
public protocol JanusLoginUI : AnyObject {
  var type: Janus.JanusLoginType { get }
  var delegate: Janus.JanusLoginDelegate? { get set }
}
@_inheritsConvenienceInitializers public class UserPasswordLoginMethod : Janus.BaseLoginMethod {
  override public var type: Janus.JanusLoginType {
    get
  }
  @objc deinit
  override public init(name: Swift.String = super, grantType: Swift.String)
  override public init(dict: [Swift.String : Any])
}
public class CustomAuthenticatorCredential {
  public var idToken: Swift.String
  weak public var delegate: Janus.JanusLoginDelegate?
  public var type: Janus.JanusLoginType
  public init(idToken: Swift.String)
  @objc deinit
}
public protocol JanusAuthCredential {
  var idToken: Swift.String? { get }
  var accessToken: Swift.String? { get }
  var refreshToken: Swift.String? { get }
  var tokenExpiredSec: Swift.Int { get }
  var tokenType: Janus.TokenType? { get }
  var data: Foundation.Data? { get }
}
public struct OAuthConfig {
  public var clientId: Swift.String
  public var scopes: Swift.String
}
public class JanusGenerator : TerraInstancesManager.InstanceGeneratable {
  public typealias InstanceType = Janus.Janus
  required public init()
  public func generateInstance(app: TerraInstancesManager.ITerraApp) -> Janus.Janus?
  public func generateDefaultInstance(config: Janus.JanusConfig) -> Janus.Janus
  public func generateDefaultInstance(config: [Swift.String : Any]) -> Janus.Janus
  @objc deinit
}
@_hasMissingDesignatedInitializers public class JanusSingleton : TerraInstancesManager.InstancesManageable {
  public typealias Generator = Janus.JanusGenerator
  public static var shared: Janus.JanusSingleton
  public var instances: [Swift.String : Janus.Janus]
  public static var DEFAULT_VALUE: Swift.String
  public var `default`: Janus.Janus {
    get
  }
  public func configureWith(config: Janus.JanusConfig)
  public func configureWith(config: [Swift.String : Any])
  public func configureWith(app: TerraInstancesManager.ITerraApp)
  public func configureWith(config: Janus.JanusConfig, for application: UIKit.UIApplication, launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?)
  public func configureWith(config: [Swift.String : Any], for application: UIKit.UIApplication, launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?)
  public func configureWith(app: TerraInstancesManager.ITerraApp, for application: UIKit.UIApplication, launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?)
  @objc deinit
}
public var TerraJanus: Janus.JanusSingleton
public class GoogleLoginUI {
  weak public var delegate: Janus.JanusLoginDelegate?
  public var type: Janus.JanusLoginType {
    get
  }
  public init(presentViewController: UIKit.UIViewController, delegate: Janus.JanusLoginDelegate?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TerraPhoneAuthProvider {
  public static func getInstances(by app: TerraInstancesManager.ITerraApp) -> Janus.PhoneAuthProvider?
  public static func getInstances(by name: Swift.String) -> Janus.PhoneAuthProvider?
  public static var `default`: Janus.PhoneAuthProvider? {
    get
  }
  @objc deinit
}
open class KeychainSwift {
  open var lastResultCode: Darwin.OSStatus
  open var accessGroup: Swift.String?
  open var synchronizable: Swift.Bool
  public init()
  public init(keyPrefix: Swift.String)
  @discardableResult
  open func set(_ value: Swift.String, forKey key: Swift.String, withAccess access: Janus.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Foundation.Data, forKey key: Swift.String, withAccess access: Janus.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Bool, forKey key: Swift.String, withAccess access: Janus.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  open func get(_ key: Swift.String) -> Swift.String?
  open func getData(_ key: Swift.String, asReference: Swift.Bool = false) -> Foundation.Data?
  open func getBool(_ key: Swift.String) -> Swift.Bool?
  @discardableResult
  open func delete(_ key: Swift.String) -> Swift.Bool
  public var allKeys: [Swift.String] {
    get
  }
  @discardableResult
  open func clear() -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class JanusLoginManager {
  public func login(_ ui: Janus.JanusLoginUI) throws
  public func login(credential: Janus.JanusCredential, delegate: Janus.JanusLoginDelegate?) throws
  public func logout()
  @objc deinit
}
public struct JanusConfig {
  public var oauthUrl: Swift.String
  public var identityUrl: Swift.String
  public var clientId: Swift.String
  public var scopes: Swift.String
  public var loginMethods: [Janus.JanusLoginMethod]
  public init(oauthUrl: Swift.String, identityUrl: Swift.String, clientId: Swift.String, scopes: Swift.String, loginMethods: [Janus.JanusLoginMethod])
}
public class FacebookCredential {
  public var type: Janus.JanusLoginType
  public var userName: Swift.String?
  public var accessToken: Swift.String?
  weak public var delegate: Janus.JanusLoginDelegate?
  public init(accessToken: Swift.String?, userName: Swift.String?)
  @objc deinit
}
@available(iOS 13.0, *)
public class AppleLoginUI {
  weak public var delegate: Janus.JanusLoginDelegate?
  public var type: Janus.JanusLoginType {
    get
  }
  public init(presentViewController: AuthenticationServices.ASAuthorizationControllerPresentationContextProviding, delegate: Janus.JanusLoginDelegate?)
  @objc deinit
}
public class TekAuthenticatorCredential {
  public var authorizer: Swift.String
  public var accessToken: Swift.String
  public var idToken: Swift.String?
  public var refreshToken: Swift.String
  public var expiresIn: Swift.Int?
  public var tokenType: Swift.String?
  public var type: Janus.JanusLoginType
  weak public var delegate: Janus.JanusLoginDelegate?
  public init(idToken: Swift.String?, accessToken: Swift.String, refreshToken: Swift.String, expiresIn: Swift.Int?, tokenType: Swift.String?)
  @objc deinit
}
public class GoogleCredential {
  public var userName: Swift.String?
  public var accessToken: Swift.String?
  public var type: Janus.JanusLoginType
  weak public var delegate: Janus.JanusLoginDelegate?
  public init(accessToken: Swift.String?, userName: Swift.String?)
  @objc deinit
}
public enum JanusError : Swift.Error, Foundation.LocalizedError {
  case notRegisteredLoginMethodYet
  case notRequestedOTPYet
  case missingRefreshToken
  case missingAccessToken
  case missingLoginType
  case requestServerFailed(message: Swift.String?)
  case missingAuthenticatorToken(type: Janus.JanusLoginType)
  case missingOTP
  case requestAuthenticatorFailed(message: Swift.String?)
  case missingInstance
  case stillWorking
  public var localizedDescription: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
}
public class TekAuthenticatorLoginMethod : Janus.BaseLoginMethod {
  override public var type: Janus.JanusLoginType {
    get
  }
  public init()
  @objc deinit
  override public init(name: Swift.String = super, grantType: Swift.String)
  override public init(dict: [Swift.String : Any])
}
public class AppleCredential {
  public var type: Janus.JanusLoginType
  public var userName: Swift.String?
  public var accessToken: Swift.String?
  weak public var delegate: Janus.JanusLoginDelegate?
  public init(accessToken: Swift.String?, userName: Swift.String?)
  @objc deinit
}
public typealias OAuthLoginHandler = (Swift.Bool, Janus.JanusAuthCredential?, Janus.JanusError?) -> ()
public enum TokenType {
  case bearer
  public static func == (a: Janus.TokenType, b: Janus.TokenType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol JanusAuthManagerProtocol {
  var credential: Janus.JanusAuthCredential? { get }
  var isLoggedIn: Swift.Bool { get }
  var authorizationToken: Swift.String? { get }
  var timeOut: Foundation.Date? { get }
  func prepareNewSession(completion: @escaping Janus.OAuthLoginHandler)
  func refreshSession(completion: @escaping Janus.OAuthLoginHandler)
  func exchangeToken(audience: Swift.String, completion: @escaping Janus.OAuthLoginHandler)
}
@_hasMissingDesignatedInitializers public class JanusAuthManager : Janus.JanusAuthManagerProtocol {
  public var authorizationToken: Swift.String? {
    get
  }
  public var isLoggedIn: Swift.Bool {
    get
  }
  public var credential: Janus.JanusAuthCredential?
  public var timeOut: Foundation.Date?
  weak public var delegate: Janus.JanusAuthManagerDelegate?
  @objc deinit
}
extension JanusAuthManager {
  public func prepareNewSession(completion: @escaping Janus.OAuthLoginHandler)
  public func refreshSession(completion: @escaping Janus.OAuthLoginHandler)
  public func exchangeToken(audience: Swift.String, completion: @escaping Janus.OAuthLoginHandler)
}
public enum JanusLoginType : Swift.String {
  case facebook
  case google
  case apple
  case passwordless
  case userPassword
  case customAuthenticator
  case tekAuthenticator
  case iBanking
  public static func initialize(code: Swift.String?) -> Janus.JanusLoginType?
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public class CustomAuthenticatorLoginMethod : Janus.BaseLoginMethod, Janus.AuthorizerHoldable {
  override public var type: Janus.JanusLoginType {
    get
  }
  public var authorizer: Swift.String {
    get
  }
  public init(name: Swift.String = "", grantType: Swift.String, authorizer: Swift.String)
  override public init(dict: [Swift.String : Any])
  @objc deinit
  override public init(name: Swift.String = super, grantType: Swift.String)
}
public protocol AuthorizerHoldable {
  var authorizer: Swift.String { get }
}
@_hasMissingDesignatedInitializers public class TerraAuthManager {
  public static func getInstances(by app: TerraInstancesManager.ITerraApp) -> Janus.JanusAuthManager?
  public static func getInstances(by name: Swift.String) -> Janus.JanusAuthManager?
  public static var `default`: Janus.JanusAuthManager {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TerraLoginManager {
  public static func getInstances(by app: TerraInstancesManager.ITerraApp) -> Janus.JanusLoginManager?
  public static func getInstances(by name: Swift.String) -> Janus.JanusLoginManager?
  public static var `default`: Janus.JanusLoginManager {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Janus {
  public static var configName: Swift.String
  public func authManager() -> Janus.JanusAuthManager
  public func loginManager() -> Janus.JanusLoginManager
  public func phoneAuthProvider() -> Janus.PhoneAuthProvider?
  public func serviceCredential() -> TekCoreService.ServicesCredential
  public func application(_ application: UIKit.UIApplication, didFinishLaunchingWithOptions launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?)
  public func application(_ app: UIKit.UIApplication, open url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any] = [:]) -> Swift.Bool
  public static func configure(appName: Swift.String = JanusSingleton.DEFAULT_VALUE, config: Janus.JanusConfig) -> Janus.Janus
  public static func configure(appName: Swift.String = JanusSingleton.DEFAULT_VALUE, config: [Swift.String : Any]) -> Janus.Janus
  public static func configure(app: TerraInstancesManager.ITerraApp) -> Janus.Janus
  @objc deinit
}
extension Janus.PasswordlessCredential : Janus.JanusCredential {}
extension Janus.FacebookLoginUI : Janus.JanusLoginUI {}
extension Janus.CustomAuthenticatorCredential : Janus.JanusCredential {}
extension Janus.GoogleLoginUI : Janus.JanusLoginUI {}
extension Janus.FacebookCredential : Janus.JanusCredential {}
@available(iOS 13.0, *)
extension Janus.AppleLoginUI : Janus.JanusLoginUI {}
extension Janus.TekAuthenticatorCredential : Janus.JanusCredential {}
extension Janus.GoogleCredential : Janus.JanusCredential {}
extension Janus.AppleCredential : Janus.JanusCredential {}
