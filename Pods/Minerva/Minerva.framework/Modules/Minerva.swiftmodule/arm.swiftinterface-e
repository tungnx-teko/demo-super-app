// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name Minerva
import CommonCrypto
import CommonCrypto/*.CC_LONG*/
import CommonCrypto/*.CC_MD5*/
import CommonCrypto/*.CC_MD5_DIGEST_LENGTH*/
import FirebaseCore
import FirebaseFirestore
import Foundation
@_exported import Minerva
import SVProgressHUD
import SnapKit
import Swift
import TekCoreNetwork
import TekCoreService
import TerraInstancesManager
import UIKit
public typealias BaseTransactionResponse = TekCoreNetwork.BaseResponse<Minerva.PaymentStatusCode>
public protocol BaseTransactionRequest {
  associatedtype TransactionType
  var clientCode: Swift.String { get }
  var clientTransactionCode: Swift.String { get }
  var terminalCode: Swift.String { get }
  var serviceCode: Swift.String { get }
  var checksum: Swift.String { get }
  func withConfig(config: Minerva.PaymentServiceConfig)
  func withMethodConfig(methodConfig: Minerva.PaymentMethodConfig, method: Minerva.MethodCode)
}
public class PaymentServiceConfig {
  public var clientCode: Swift.String
  public var terminalCode: Swift.String
  public var serviceCode: Swift.String
  public var secretKey: Swift.String
  public var baseUrl: Swift.String
  public var firebaseConfig: Minerva.FirebaseConfig
  public init(rawValue: [Swift.String : Any])
  @objc deinit
}
public class FirebaseConfig {
  public init(rawValue: [Swift.String : Any])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class PaymentViewController : UIKit.UIViewController {
  @objc override dynamic public func viewDidLoad()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public struct AnyRequest : TekCoreNetwork.BaseRequestProtocol {
  public typealias ResponseType = Minerva.BaseTransactionResponse
  public init<Base>(_ base: Base) where Base : TekCoreNetwork.BaseRequestProtocol
  public var encoder: TekCoreNetwork.APIParamEncoder {
    get
  }
  public var method: TekCoreNetwork.APIMethod {
    get
  }
  public var path: Swift.String {
    get
  }
  public var hasToken: Swift.Bool {
    get
  }
}
public struct PaymentMethodV2 : Swift.Decodable {
  public var partnerCode: Swift.String
  public var methodCode: Swift.String
  public var payType: Swift.String
  public var merchantMethodCodes: [Minerva.MerchantMethodCode]
  public init(from decoder: Swift.Decoder) throws
}
public struct MerchantMethodCode : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class QrRequestData : Minerva.PaymentRequestData {
  public var qrWidth: Swift.Int? {
    get
  }
  public var qrHeight: Swift.Int? {
    get
  }
  public var qrImageType: Swift.Int? {
    get
  }
  public enum QRImageType : Swift.Int {
    case binary
    case image
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public init(merchantMethodCode: Swift.String, methodCode: Swift.String, clientTransactionCode: Swift.String, amount: Swift.Int, qrWidth: Swift.Int? = nil, qrHeight: Swift.Int? = nil, qrImageType: Minerva.QrRequestData.QRImageType = .binary)
  @objc deinit
}
public class SPOSMethod : Minerva.PaymentMethod {
  public static var sposCode: Minerva.MethodCode
  public var config: Minerva.PaymentMethodConfig
  public var methodCode: Minerva.MethodCode
  public var gatewayConfig: Minerva.PaymentServiceConfig!
  public init(config: Minerva.SPOSPaymentConfig, methodCode: Minerva.MethodCode)
  public func validateRequest(request: Minerva.AnyTransactionRequest) -> Minerva.PaymentError?
  public func constructApiRequest(request: Minerva.AnyTransactionRequest) throws -> Minerva.AnyRequest
  @objc deinit
}
public class CTTTransactionRequest : Minerva.BaseTransactionRequest, Swift.Encodable {
  public typealias TransactionType = Minerva.CTTTransaction
  public var clientCode: Swift.String
  public var clientTransactionCode: Swift.String
  public var terminalCode: Swift.String
  public var serviceCode: Swift.String
  public var checksum: Swift.String
  public init(bankCode: Swift.String = "", orderId: Swift.String, orderCode: Swift.String, orderDescription: Swift.String? = nil, amount: Swift.Int, partnerCode: Swift.String = "VNPAY", returnUrl: Swift.String? = nil, cancelUrl: Swift.String? = nil, expireTime: Swift.Int = 600)
  public func withConfig(config: Minerva.PaymentServiceConfig)
  public func withMethodConfig(methodConfig: Minerva.PaymentMethodConfig, method: Minerva.MethodCode)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class LoyaltyRequestData : Minerva.PaymentRequestData {
  public var points: Swift.Int {
    get
  }
  public init(merchantMethodCode: Swift.String, methodCode: Swift.String, clientTransactionCode: Swift.String, amount: Swift.Int, points: Swift.Int)
  override public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public class SPOSTransactionRequest : Minerva.BaseTransactionRequest, Swift.Encodable {
  public typealias TransactionType = Minerva.SPOSTransaction
  public var clientCode: Swift.String
  public var clientTransactionCode: Swift.String
  public var terminalCode: Swift.String
  public var serviceCode: Swift.String
  public var checksum: Swift.String
  public init(bankCode: Swift.String = "", orderId: Swift.String, orderCode: Swift.String, orderDescription: Swift.String? = nil, amount: Swift.Int, partnerCode: Swift.String = "VNPAY", returnUrl: Swift.String? = nil, cancelUrl: Swift.String? = nil)
  public func withConfig(config: Minerva.PaymentServiceConfig)
  public func withMethodConfig(methodConfig: Minerva.PaymentMethodConfig, method: Minerva.MethodCode)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public enum PaymentError : Swift.Error {
  case timeOut
  case methodNotFound
  case invalidRequest
  case invalidResponse
  case missingPaymentConfig
  case invalidTransactionRequest
  case transaction(error: Minerva.TransactionError)
  case custom(message: Swift.String)
}
public class CTTTransaction : Minerva.BaseTransaction, Swift.Codable {
  public var code: Swift.String
  public var qrContent: Swift.String
  public var url: Swift.String?
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct PaymentTheme {
}
public struct Deposit : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public class ATMTransaction : Minerva.BaseTransaction, Swift.Codable {
  public var code: Swift.String
  public var url: Swift.String
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_inheritsConvenienceInitializers public class CreditRequestData : Minerva.PaymentRequestData {
  public init(merchantMethodCode: Swift.String, methodCode: Swift.String, clientTransactionCode: Swift.String, amount: Swift.Int)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ATMTransactionResponse : Minerva.BaseTransactionResponse {
  public var data: Minerva.ATMTransaction?
  public var message: Swift.String?
  @objc deinit
  override public init(code: Minerva.PaymentStatusCode)
}
@_hasMissingDesignatedInitializers public class CardRequestData : Minerva.PaymentRequestData {
  public enum PaymentCardType : Swift.Int {
    case redirect
    case qrcode
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public var bankCode: Swift.String {
    get
  }
  public var type: Swift.Int {
    get
  }
  public var token: Swift.String {
    get
  }
  override public func encode(to encoder: Swift.Encoder) throws
  public init(merchantMethodCode: Swift.String, methodCode: Swift.String, clientTransactionCode: Swift.String, amount: Swift.Int, bankCode: Swift.String, type: Minerva.CardRequestData.PaymentCardType, token: Swift.String)
  @objc deinit
}
public class PaymentMethodsGetResponse : TekCoreNetwork.BaseResponse<Minerva.PaymentCodeV2> {
  public var merchantCode: Swift.String
  public var paymentMethods: [Minerva.PaymentMethodV2]
  public var deposit: Minerva.Deposit?
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  override public init(code: Minerva.PaymentCodeV2)
}
@_hasMissingDesignatedInitializers public class SPOSTransaction : Minerva.BaseTransaction, Swift.Decodable {
  public var code: Swift.String
  public var merchantPartnerCode: Swift.String
  public init(code: Swift.String, merchantPartnerCode: Swift.String)
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
public class ATMTransactionRequest : Minerva.BaseTransactionRequest, Swift.Encodable {
  public typealias TransactionType = Minerva.ATMTransaction
  public var clientCode: Swift.String
  public var clientTransactionCode: Swift.String
  public var terminalCode: Swift.String
  public var serviceCode: Swift.String
  public var checksum: Swift.String
  public init(bankCode: Swift.String = "", orderId: Swift.String, orderCode: Swift.String, orderDescription: Swift.String? = nil, amount: Swift.Int, partnerCode: Swift.String = "VNPAY", returnUrl: Swift.String? = nil, cancelUrl: Swift.String? = nil, expireTime: Swift.Int = 600)
  public func withConfig(config: Minerva.PaymentServiceConfig)
  public func withMethodConfig(methodConfig: Minerva.PaymentMethodConfig, method: Minerva.MethodCode)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
@_inheritsConvenienceInitializers public class ATMPaymentConfig : Minerva.PaymentMethodConfig {
  override public init(partnerCode: Swift.String = "VNPAY")
  @objc deinit
}
public class PaymentRequest {
  public var orderId: Swift.String
  public var orderCode: Swift.String
  public var amount: Swift.Double
  public var orderDescription: Swift.String
  public var expireTime: Swift.Int
  public init(orderId: Swift.String, orderCode: Swift.String, orderDescription: Swift.String = "", amount: Swift.Double, expireTime: Swift.Int = 600)
  @objc deinit
}
open class PaymentMethodConfig {
  public var partnerCode: Swift.String
  public init(partnerCode: Swift.String)
  @objc deinit
}
public class CTTMethod : Minerva.PaymentMethod {
  public static var cttCode: Minerva.MethodCode
  public static var mmsCode: Minerva.MethodCode
  public var config: Minerva.PaymentMethodConfig
  public var methodCode: Minerva.MethodCode
  public var gatewayConfig: Minerva.PaymentServiceConfig!
  public init(config: Minerva.CTTPaymentConfig, methodCode: Minerva.MethodCode)
  public func validateRequest(request: Minerva.AnyTransactionRequest) -> Minerva.PaymentError?
  public func constructApiRequest(request: Minerva.AnyTransactionRequest) throws -> Minerva.AnyRequest
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ImagesHelper {
  public static func imageFor(name imageName: Swift.String) -> UIKit.UIImage?
  @objc deinit
}
public struct PaymentData : Swift.Encodable {
  public init(credit: Minerva.CreditRequestData? = nil, loyalty: Minerva.LoyaltyRequestData? = nil, qr: Minerva.QrRequestData? = nil, card: Minerva.CardRequestData? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public class MethodCode {
  public var name: Swift.String
  public var code: Swift.String
  public init(name: Swift.String, code: Swift.String)
  @objc deinit
}
public typealias Transaction = Minerva.PaymentAIOResponse.PaymentTransaction
@_hasMissingDesignatedInitializers public class PaymentObserver {
  public func observe(transaction: Minerva.Transaction, completion: @escaping (Minerva.PaymentResult) -> ())
  public func removeObserver()
  @objc deinit
}
public struct PaymentTransactionResult {
  public var amount: Swift.Double?
  public var message: Swift.String?
  public var ref: Swift.String?
  public var status: Swift.String?
  public var transactionCode: Swift.String?
  public var orderCode: Swift.String?
  public var methodCode: Swift.String?
  public var createdTime: Swift.Int?
  public var isSuccess: Swift.Bool {
    get
  }
  public init(fromDict dict: [Swift.String : Any])
}
public enum TransactionError : Swift.Int {
  case common
  case processing
  case paymentProcessed
  case balanceNotEnough
  case paymentCancelled
  case paymentMethodNotSupported
  case outOfStock
  public init(code: Swift.Int)
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public protocol PaymentMethod {
  var config: Minerva.PaymentMethodConfig { get }
  var gatewayConfig: Minerva.PaymentServiceConfig! { get set }
  var methodCode: Minerva.MethodCode { get }
  func validateRequest(request: Minerva.AnyTransactionRequest) -> Minerva.PaymentError?
  func constructApiRequest(request: Minerva.AnyTransactionRequest) throws -> Minerva.AnyRequest
}
public struct AnyTransactionRequest : Minerva.BaseTransactionRequest {
  public typealias TransactionType = Minerva.BaseTransaction
  public init<Base>(_ base: Base) where Base : Minerva.BaseTransactionRequest
  public var base: Any {
    get
  }
  public var clientCode: Swift.String {
    get
  }
  public var clientTransactionCode: Swift.String {
    get
  }
  public var terminalCode: Swift.String {
    get
  }
  public var serviceCode: Swift.String {
    get
  }
  public var checksum: Swift.String {
    get
  }
  public func withConfig(config: Minerva.PaymentServiceConfig)
  public func withMethodConfig(methodConfig: Minerva.PaymentMethodConfig, method: Minerva.MethodCode)
}
@_inheritsConvenienceInitializers public class CTTPaymentConfig : Minerva.PaymentMethodConfig {
  override public init(partnerCode: Swift.String = "VNPAY")
  @objc deinit
}
public class PaymentAIOPayload : Swift.Encodable {
  public init(merchantCode: Swift.String, orderCode: Swift.String, userId: Swift.String, totalPaymentAmount: Swift.Int, payments: Minerva.PaymentData, successUrl: Swift.String, cancelUrl: Swift.String)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public class SPOSPaymentConfig : Minerva.PaymentMethodConfig {
  public init(mcc: Swift.String = "", partnerCode: Swift.String = "VNPAY")
  @objc deinit
  override public init(partnerCode: Swift.String)
}
public class PaymentCodeV2 : TekCoreNetwork.TekoCodeProtocol, Swift.Decodable {
  public var successCode: Swift.String
  public var code: Swift.String?
  final public let error: Swift.Error?
  final public let message: Swift.String?
  final public let details: [Minerva.PaymentV2Error]?
  required public init(from decoder: Swift.Decoder) throws
  @objc deinit
  public typealias ValueType = Swift.String
}
@_hasMissingDesignatedInitializers public class PaymentV2Error : Swift.Decodable {
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class PaymentV2ErrorMetaData : Swift.Decodable {
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class BaseTransaction {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CTTTransactionResponse : Minerva.BaseTransactionResponse {
  public var data: Minerva.CTTTransaction?
  public var message: Swift.String?
  @objc deinit
  override public init(code: Minerva.PaymentStatusCode)
}
public class ATMMethod : Minerva.PaymentMethod {
  public static var atmCode: Minerva.MethodCode
  public var config: Minerva.PaymentMethodConfig
  public var methodCode: Minerva.MethodCode
  public var gatewayConfig: Minerva.PaymentServiceConfig!
  public init(config: Minerva.ATMPaymentConfig, methodCode: Minerva.MethodCode)
  public func validateRequest(request: Minerva.AnyTransactionRequest) -> Minerva.PaymentError?
  public func constructApiRequest(request: Minerva.AnyTransactionRequest) throws -> Minerva.AnyRequest
  @objc deinit
}
extension Encodable {
  public var dictionary: [Swift.String : Any] {
    get
  }
  public func stringify(withChecksum: Swift.Bool = false) -> Swift.String
}
public typealias MinervaConfig = Minerva.PaymentServiceConfig
public class MinervaGenerator : TerraInstancesManager.InstanceGeneratable {
  public typealias InstanceType = Minerva.Minerva
  required public init()
  public func generateInstance(app: TerraInstancesManager.ITerraApp) -> Minerva.Minerva?
  public func generateDefaultInstance(config: Minerva.MinervaConfig) -> Minerva.Minerva
  public func generateDefaultInstance(config: [Swift.String : Any]) -> Minerva.Minerva
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MinervaSingleton : TerraInstancesManager.InstancesManageable {
  public typealias Generator = Minerva.MinervaGenerator
  public static var shared: Minerva.MinervaSingleton
  public var instances: [Swift.String : Minerva.Minerva]
  public static var DEFAULT_VALUE: Swift.String
  public var `default`: Minerva.Minerva {
    get
  }
  public func configureWith(config: Minerva.MinervaConfig)
  public func configureWith(config: [Swift.String : Any])
  public func configureWith(app: TerraInstancesManager.ITerraApp)
  @objc deinit
}
public var TerraPayment: Minerva.MinervaSingleton
public struct PaymentMethodsGetPayload : Swift.Encodable {
  public init(userId: Swift.String? = nil, terminalCode: Swift.String, amount: Swift.Int, orderItems: [Minerva.OrderItem])
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class PaymentAIOResponse : TekCoreNetwork.BaseResponse<Minerva.PaymentCodeV2> {
  public var message: Swift.String?
  public var orderCode: Swift.String?
  public var payments: Minerva.PaymentAIOResponse.PaymentsData?
  public class PaymentsData : Swift.Decodable {
    public var credit: Minerva.PaymentAIOResponse.PaymentTransaction?
    public var loyalty: Minerva.PaymentAIOResponse.PaymentTransaction?
    public var qr: Minerva.PaymentAIOResponse.PaymentTransaction?
    public var card: Minerva.PaymentAIOResponse.PaymentTransaction?
    required public init(from decoder: Swift.Decoder) throws
    @objc deinit
  }
  public class PaymentTransaction : Swift.Decodable {
    public var clientTransactionCode: Swift.String
    public var transactionCode: Swift.String
    public var methodCode: Swift.String
    public var responseCode: Swift.String?
    public var responseMessage: Swift.String?
    public var qrContent: Swift.String?
    public var returnUrl: Swift.String?
    public var traceId: Swift.String
    public var merchantMethodCode: Swift.String
    public var merchantCode: Swift.String
    required public init(from decoder: Swift.Decoder) throws
    @objc deinit
  }
  @objc deinit
  override public init(code: Minerva.PaymentCodeV2)
}
@_hasMissingDesignatedInitializers public class DateUtils {
  public static func toString(date: Foundation.Date) -> Swift.String
  @objc deinit
}
public protocol PaymentDelegate : AnyObject {
  func onResult(_ result: Minerva.PaymentResult)
  func onCancel()
}
@_hasMissingDesignatedInitializers public class PaymentRequestData : Swift.Encodable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public typealias PaymentResult = Swift.Result<Minerva.PaymentTransactionResult, Minerva.PaymentError>
public struct OrderItem : Swift.Encodable {
  public init(sku: Swift.String, quantity: Swift.Int, price: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class CrypUtils {
  public static func md5(text: Swift.String, secretKey: Swift.String) -> Swift.String
  public static func sha256(text: Swift.String) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers public class PaymentStatusCode : TekCoreNetwork.TekoIntCode {
  @objc override dynamic public var successCode: Swift.Int {
    @objc get
  }
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  override public init(code: Swift.Int?, message: Swift.String?)
}
extension UIColor {
  public convenience init(hex3: Swift.UInt16, alpha: CoreGraphics.CGFloat = 1)
}
@_hasMissingDesignatedInitializers public class SPOSTransactionResponse : Minerva.BaseTransactionResponse {
  public var data: Minerva.SPOSTransaction?
  public var message: Swift.String?
  @objc deinit
  override public init(code: Minerva.PaymentStatusCode)
}
public class Minerva {
  public struct Config {
    public static var expireTime: Swift.Int
  }
  public struct Strings {
    public static var closeButtonTitle: Swift.String
    public static var cancelButtonTitle: Swift.String
    public static var paymentSuccessTitle: Swift.String
    public static var paymentFailureTitle: Swift.String
    public static var transactionCodeTitle: Swift.String
    public static var paymentMethodsTitle: Swift.String
    public static var paymentQRTitle: Swift.String
    public static var paymentQRMethod: Swift.String
    public static var paymentCTTMethod: Swift.String
    public static var paymentSPOSMethod: Swift.String
    public static var paymentCashMethod: Swift.String
    public static var totalMoneyTitle: Swift.String
    public static var resultTitle: Swift.String
    public static var sposWaitingResult: Swift.String
  }
  public struct Theme {
    public static var primaryColor: UIKit.UIColor
    public static var navigationViewHeight: CoreGraphics.CGFloat
  }
  public struct Images {
    public static var backButton: UIKit.UIImage?
    public static var sposIcon: UIKit.UIImage?
    public static var qrIcon: UIKit.UIImage?
    public static var cardIcon: UIKit.UIImage?
  }
  public static var configName: Swift.String
  public init(appName: Swift.String, config: Minerva.PaymentServiceConfig)
  public func getPaymentUI(request: Minerva.PaymentRequest, delegate: Minerva.PaymentDelegate) -> Minerva.PaymentViewController
  @objc deinit
}
extension Minerva {
  public static func configure(appName: Swift.String = MinervaSingleton.DEFAULT_VALUE, config: Minerva.PaymentServiceConfig) -> Minerva.Minerva
  public static func configure(appName: Swift.String = MinervaSingleton.DEFAULT_VALUE, config: [Swift.String : Any]) -> Minerva.Minerva
  public static func configure(app: TerraInstancesManager.ITerraApp) -> Minerva.Minerva
}
extension Minerva {
  public func setPaymentMethods(_ methods: [Minerva.PaymentMethod])
  public func getPaymentMethods() -> [Minerva.PaymentMethod]
  public func addPaymentMethod(_ method: Minerva.PaymentMethod)
  public func clearPaymentMethods()
  public func pay<T>(method: Minerva.MethodCode, request: T, completion: @escaping (Swift.Result<T.TransactionType, Swift.Error>) -> ()) throws where T : Minerva.BaseTransactionRequest
  public func getPaymentMethods(payload: Minerva.PaymentMethodsGetPayload, completion: @escaping (Swift.Result<Minerva.PaymentMethodsGetResponse, Minerva.PaymentError>) -> ())
  public func initAIOPayment(payload: Minerva.PaymentAIOPayload, completion: @escaping (Swift.Result<Minerva.PaymentAIOResponse, Minerva.PaymentError>) -> ())
  public func createObserver() -> Minerva.PaymentObserver
}
