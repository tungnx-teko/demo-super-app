// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name TekIdentityService
import Foundation
import Swift
import TekCoreNetwork
import TekCoreService
@_exported import TekIdentityService
import TekServiceInterfaces
import TerraInstancesManager
@_inheritsConvenienceInitializers public class IdentityService : TekCoreService.BasicWorkerService, TekServiceInterfaces.IIdentityService {
  public func verifyPhone(_ phoneNumber: Swift.String, completion: @escaping TekServiceInterfaces.IdentityResponseHandler)
  public func updatePhone(_ phoneNumber: Swift.String, otp: Swift.String, completion: @escaping TekServiceInterfaces.IdentityResponseHandler)
  @objc deinit
  override public init(url: Foundation.URL, credential: TekCoreService.ServicesCredential? = super, errorDelegate: TekCoreService.ServicesErrorDelegate? = super)
}
public class IdentityServiceFactory : TekCoreService.ServiceBuildable, TekCoreService.ServiceConverterSupportable, TekCoreService.ServiceErrorDelegateAttachable, TekCoreService.ServiceCredentialAttachable {
  public typealias ServiceConverter = TekIdentityService.IdentityConfigConverter
  public var credential: TekCoreService.ServicesCredential?
  public var rawConfig: [Swift.String : Any]
  public var serviceName: Swift.String
  weak public var errorDelegate: TekCoreService.ServicesErrorDelegate?
  required public init()
  public func withErrorDelegate(_ delegate: TekCoreService.ServicesErrorDelegate)
  public func createService() throws -> TekCoreService.CoreService
  public func withCredential(_ credential: TekCoreService.ServicesCredential)
  @objc deinit
}
@_inheritsConvenienceInitializers public class IdentityConfigConverter : TekCoreService.BaseServiceConverter<TekIdentityService.IdentityConfig> {
  override public func convertConfig(rawValue: [Swift.String : Any]) -> TekIdentityService.IdentityConfig
  @objc deinit
  required public init(input: [Swift.String : Any])
}
public class IdentityServiceInstanceGenerator : TerraInstancesManager.ServiceInstanceGeneratable {
  public typealias InstanceType = TekIdentityService.IdentityService
  public typealias ServiceFactory = TekIdentityService.IdentityServiceFactory
  required public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TerraIdentitySingleton : TerraInstancesManager.InstancesManageable {
  public typealias Generator = TekIdentityService.IdentityServiceInstanceGenerator
  public static var shared: TekIdentityService.TerraIdentitySingleton
  public var instances: [Swift.String : TekIdentityService.IdentityService]
  @objc deinit
}
public var TerraIdentity: TekIdentityService.TerraIdentitySingleton
public struct IdentityConfig {
  public var url: Swift.String
}
