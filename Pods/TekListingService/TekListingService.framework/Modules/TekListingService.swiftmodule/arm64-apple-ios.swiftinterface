// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name TekListingService
import Foundation
import Swift
import TekCoreNetwork
import TekCoreService
@_exported import TekListingService
import TekServiceInterfaces
import TerraInstancesManager
public struct ListingConfig {
}
public class ListingServiceFactory : TekCoreService.ServiceBuildable, TekCoreService.ServiceConverterSupportable, TekCoreService.ServiceCredentialAttachable, TekCoreService.ServiceErrorDelegateAttachable {
  public typealias ServiceConverter = TekListingService.ListingConfigConverter
  public var serviceName: Swift.String
  public var rawConfig: [Swift.String : Any]
  public var credential: TekCoreService.ServicesCredential?
  weak public var errorDelegate: TekCoreService.ServicesErrorDelegate?
  required public init()
  public func withErrorDelegate(_ delegate: TekCoreService.ServicesErrorDelegate)
  public func withCredential(_ credential: TekCoreService.ServicesCredential)
  public func createService() throws -> TekCoreService.CoreService
  @objc deinit
}
public struct AnyCodable : Swift.Codable {
  public let value: Any
  public init<T>(_ value: T?)
}
extension AnyCodable : TekListingService._AnyEncodable, TekListingService._AnyDecodable {
}
extension AnyCodable : Swift.Equatable {
  public static func == (lhs: TekListingService.AnyCodable, rhs: TekListingService.AnyCodable) -> Swift.Bool
}
extension AnyCodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension AnyCodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension AnyCodable : Swift.ExpressibleByNilLiteral {
}
extension AnyCodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension AnyCodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension AnyCodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension AnyCodable : Swift.ExpressibleByStringLiteral {
  public typealias StringLiteralType = Swift.String
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension AnyCodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension AnyCodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
public class ListingService : TekCoreService.CoreService, TekServiceInterfaces.IListingService {
  public var url: Foundation.URL
  public var serviceCredential: TekCoreService.ServicesCredential?
  public init(url: Foundation.URL, terminalCode: Swift.String, channel: Swift.String, credential: TekCoreService.ServicesCredential?, errorDelegate: TekCoreService.ServicesErrorDelegate?)
  public func getCategories(page: Swift.Int, limit: Swift.Int, sorts: [Swift.String], orders: [Swift.String], level: Swift.Int, parentId: Swift.Int?, completion: @escaping TekServiceInterfaces.GetCategoriesResponseHandler)
  public func getTopCategories(page: Swift.Int, limit: Swift.Int, sorts: [Swift.String], orders: [Swift.String], level: Swift.Int, parentId: Swift.Int?, zone: TekServiceInterfaces.CategoryZone?, completion: @escaping TekServiceInterfaces.GetCategoriesResponseHandler)
  public func getCategories(displayCategoryId: Swift.Int, sort: [Swift.String], completion: @escaping TekServiceInterfaces.GetBrandCategoriesResponseHandler)
  public func getCategories(sellerCategories: [Swift.Int], completion: @escaping TekServiceInterfaces.GetBrandCategoriesResponseHandler)
  public func getItemsForTopBanner(campaignKey: Swift.String, handler: @escaping TekServiceInterfaces.LandingPageItemResponseHandler)
  public func getItemsForDiscount(campaignKey: Swift.String, handler: @escaping TekServiceInterfaces.LandingPageItemResponseHandler)
  public func getItemsForBannerProducts(campaignKey: Swift.String, handler: @escaping TekServiceInterfaces.LandingPageItemResponseHandler)
  public func getItemsForAllProducts(campaignKey: Swift.String, handler: @escaping TekServiceInterfaces.LandingPageItemResponseHandler)
  public func getPopularKeywords(visitorId: Swift.String?, completion: @escaping TekServiceInterfaces.KeywordsResponseHandler)
  public func searchKeywords(query: Swift.String, page: Swift.Int, visitorId: Swift.String?, completion: @escaping TekServiceInterfaces.KeywordsResponseHandler)
  @objc deinit
}
public class ListingServiceInstanceGenerator : TerraInstancesManager.ServiceInstanceGeneratable {
  public typealias InstanceType = TekListingService.ListingService
  public typealias ServiceFactory = TekListingService.ListingServiceFactory
  required public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TerraListingSingleton : TerraInstancesManager.InstancesManageable {
  public typealias Generator = TekListingService.ListingServiceInstanceGenerator
  public static var shared: TekListingService.TerraListingSingleton
  public var instances: [Swift.String : TekListingService.ListingService]
  @objc deinit
}
public var TerraListing: TekListingService.TerraListingSingleton
public struct AnyEncodable : Swift.Encodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyEncodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension AnyEncodable : TekListingService._AnyEncodable {
}
extension _AnyEncodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension AnyEncodable : Swift.Equatable {
  public static func == (lhs: TekListingService.AnyEncodable, rhs: TekListingService.AnyEncodable) -> Swift.Bool
}
extension AnyEncodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension AnyEncodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension AnyEncodable : Swift.ExpressibleByNilLiteral {
}
extension AnyEncodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension AnyEncodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension AnyEncodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension AnyEncodable : Swift.ExpressibleByStringLiteral {
  public typealias StringLiteralType = Swift.String
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension AnyEncodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension AnyEncodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension _AnyEncodable {
  public init(nilLiteral _: ())
  public init(booleanLiteral value: Swift.Bool)
  public init(integerLiteral value: Swift.Int)
  public init(floatLiteral value: Swift.Double)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(arrayLiteral elements: Any...)
  public init(dictionaryLiteral elements: (Swift.AnyHashable, Any)...)
}
public class KeywordsService : TekCoreService.CoreService, TekServiceInterfaces.IKeywordsService {
  public var url: Foundation.URL
  public var serviceCredential: TekCoreService.ServicesCredential?
  public init(url: Foundation.URL, terminalCode: Swift.String, channel: Swift.String, credential: TekCoreService.ServicesCredential?, errorDelegate: TekCoreService.ServicesErrorDelegate?)
  public func getPopularKeywords(visitorId: Swift.String?, completion: @escaping TekServiceInterfaces.KeywordsResponseHandler)
  public func searchKeywords(query: Swift.String, page: Swift.Int, visitorId: Swift.String?, completion: @escaping TekServiceInterfaces.KeywordsResponseHandler)
  @objc deinit
}
@_inheritsConvenienceInitializers public class ListingConfigConverter : TekCoreService.BaseServiceConverter<TekListingService.ListingConfig> {
  override public func convertConfig(rawValue: [Swift.String : Any]) -> TekListingService.ListingConfig
  @objc deinit
  required public init(input: [Swift.String : Any])
}
public struct AnyDecodable : Swift.Decodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyDecodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension AnyDecodable : TekListingService._AnyDecodable {
}
extension _AnyDecodable {
  public init(from decoder: Swift.Decoder) throws
}
extension AnyDecodable : Swift.Equatable {
  public static func == (lhs: TekListingService.AnyDecodable, rhs: TekListingService.AnyDecodable) -> Swift.Bool
}
extension AnyDecodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension AnyDecodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
