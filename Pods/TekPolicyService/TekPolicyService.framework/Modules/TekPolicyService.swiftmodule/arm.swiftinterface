// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name TekPolicyService
import Foundation
import Swift
import TekCoreNetwork
import TekCoreService
@_exported import TekPolicyService
import TekServiceInterfaces
import TerraInstancesManager
public class PolicyService : TekCoreService.BasicWorkerService, TekServiceInterfaces.IPolicyService {
  public var terminalCode: Swift.String
  public init(url: Foundation.URL, terminalCode: Swift.String, credential: TekCoreService.ServicesCredential?, errorDelegate: TekCoreService.ServicesErrorDelegate?)
  public func getPolicy(sku: Swift.String, completion: @escaping TekServiceInterfaces.GetPoliciesHandler)
  @objc deinit
  override public init(url: Foundation.URL, credential: TekCoreService.ServicesCredential? = super, errorDelegate: TekCoreService.ServicesErrorDelegate? = super)
}
@_inheritsConvenienceInitializers public class PolicyConfigConverter : TekCoreService.BaseServiceConverter<TekPolicyService.PolicyConfig> {
  override public func convertConfig(rawValue: [Swift.String : Any]) -> TekPolicyService.PolicyConfig
  @objc deinit
  required public init(input: [Swift.String : Any])
}
public class PolicyServiceInstanceGenerator : TerraInstancesManager.ServiceInstanceGeneratable {
  public typealias InstanceType = TekPolicyService.PolicyService
  public typealias ServiceFactory = TekPolicyService.PolicyServiceFactory
  required public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TerraPolicySingleton : TerraInstancesManager.InstancesManageable {
  public typealias Generator = TekPolicyService.PolicyServiceInstanceGenerator
  public static var shared: TekPolicyService.TerraPolicySingleton
  public var instances: [Swift.String : TekPolicyService.PolicyService]
  @objc deinit
}
public var TerraPolicy: TekPolicyService.TerraPolicySingleton
public struct PolicyError : Swift.Error {
  public let code: Swift.Int
  public let error: Swift.String
  public let message: Swift.String
  public init(code: Swift.Int, message: Swift.String, error: Swift.String)
}
public class PolicyServiceFactory : TekCoreService.ServiceBuildable, TekCoreService.ServiceConverterSupportable, TekCoreService.ServiceCredentialAttachable, TekCoreService.ServiceErrorDelegateAttachable {
  public typealias ServiceConverter = TekPolicyService.PolicyConfigConverter
  public var serviceName: Swift.String
  public var rawConfig: [Swift.String : Any]
  public var credential: TekCoreService.ServicesCredential?
  weak public var errorDelegate: TekCoreService.ServicesErrorDelegate?
  required public init()
  public func withCredential(_ credential: TekCoreService.ServicesCredential)
  public func withErrorDelegate(_ delegate: TekCoreService.ServicesErrorDelegate)
  public func createService() throws -> TekCoreService.CoreService
  @objc deinit
}
public struct PolicyConfig {
  public var url: Swift.String
  public var terminalCode: Swift.String
}
