// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name TekSearchService
import Foundation
import Swift
import TekCoreNetwork
import TekCoreService
@_exported import TekSearchService
import TekServiceInterfaces
import TerraInstancesManager
public class SearchServiceInstanceGenerator : TerraInstancesManager.ServiceInstanceGeneratable {
  public typealias InstanceType = TekSearchService.SearchService
  public typealias ServiceFactory = TekSearchService.SearchServiceFactory
  required public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TerraSearchSingleton : TerraInstancesManager.InstancesManageable {
  public typealias Generator = TekSearchService.SearchServiceInstanceGenerator
  public static var shared: TekSearchService.TerraSearchSingleton
  public var instances: [Swift.String : TekSearchService.SearchService]
  @objc deinit
}
public var TerraSearch: TekSearchService.TerraSearchSingleton
public struct SearchConfig {
}
public class SearchServiceFactory : TekCoreService.ServiceBuildable, TekCoreService.ServiceConverterSupportable, TekCoreService.ServiceCredentialAttachable, TekCoreService.ServiceErrorDelegateAttachable {
  public typealias ServiceConverter = TekSearchService.SearchConfigConverter
  public var serviceName: Swift.String
  public var rawConfig: [Swift.String : Any]
  public var credential: TekCoreService.ServicesCredential?
  weak public var errorDelegate: TekCoreService.ServicesErrorDelegate?
  required public init()
  public func withErrorDelegate(_ delegate: TekCoreService.ServicesErrorDelegate)
  public func withCredential(_ credential: TekCoreService.ServicesCredential)
  public func createService() throws -> TekCoreService.CoreService
  @objc deinit
}
@_inheritsConvenienceInitializers public class SearchConfigConverter : TekCoreService.BaseServiceConverter<TekSearchService.SearchConfig> {
  override public func convertConfig(rawValue: [Swift.String : Any]) -> TekSearchService.SearchConfig
  @objc deinit
  required public init(input: [Swift.String : Any])
}
public class SearchService : TekCoreService.CoreService, TekServiceInterfaces.ISearchService {
  public var url: Foundation.URL
  public var serviceCredential: TekCoreService.ServicesCredential?
  public init(url: Foundation.URL, terminalCode: Swift.String, channel: Swift.String, xTkAccessToken: Swift.String, credential: TekCoreService.ServicesCredential?, errorDelegate: TekCoreService.ServicesErrorDelegate?)
  public func getBannerItems(with zone: TekServiceInterfaces.BannerZone, campaignKey: Swift.String, completion: @escaping TekServiceInterfaces.BannerResultHandler)
  @objc deinit
}
public class BannerService : TekCoreService.BasicWorkerService, TekServiceInterfaces.IBannerService {
  public var xTkAccessToken: Swift.String
  public var channel: Swift.String
  public var terminalCode: Swift.String
  public init(url: Foundation.URL, terminalCode: Swift.String, channel: Swift.String, xTkAccessToken: Swift.String, credential: TekCoreService.ServicesCredential?, errorDelegate: TekCoreService.ServicesErrorDelegate?)
  public func getBannerItems(with zone: TekServiceInterfaces.BannerZone, campaignKey: Swift.String, completion: @escaping TekServiceInterfaces.BannerResultHandler)
  @objc deinit
  override public init(url: Foundation.URL, credential: TekCoreService.ServicesCredential? = super, errorDelegate: TekCoreService.ServicesErrorDelegate? = super)
}
