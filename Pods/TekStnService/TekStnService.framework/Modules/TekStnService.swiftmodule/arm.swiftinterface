// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name TekStnService
import Foundation
import Swift
import TekCoreNetwork
import TekCoreService
import TekServiceInterfaces
@_exported import TekStnService
import TerraInstancesManager
@_inheritsConvenienceInitializers public class StnService : TekCoreService.BasicWorkerService, TekServiceInterfaces.IStnService {
  public func register(userId: Swift.String, token: Swift.String)
  public func unregister(userId: Swift.String, token: Swift.String)
  public func getNotificationList(checkPoint: Swift.Int?, handler: @escaping TekServiceInterfaces.GetNotificationHandler)
  public func getUnreadCount(handler: @escaping TekServiceInterfaces.GetUnreadCountHandler)
  public func markAsRead(id: Swift.Int, handler: @escaping TekServiceInterfaces.MarkAsReadHandler)
  @objc deinit
  override public init(url: Foundation.URL, credential: TekCoreService.ServicesCredential? = super, errorDelegate: TekCoreService.ServicesErrorDelegate? = super)
}
@_inheritsConvenienceInitializers public class StnConfigConverter : TekCoreService.BaseServiceConverter<TekStnService.StnConfig> {
  override public func convertConfig(rawValue: [Swift.String : Any]) -> TekStnService.StnConfig
  @objc deinit
  required public init(input: [Swift.String : Any])
}
public class StnServiceFactory : TekCoreService.ServiceBuildable, TekCoreService.ServiceConverterSupportable, TekCoreService.ServiceCredentialAttachable, TekCoreService.ServiceErrorDelegateAttachable {
  public typealias ServiceConverter = TekStnService.StnConfigConverter
  public var rawConfig: [Swift.String : Any]
  public var serviceName: Swift.String
  public var credential: TekCoreService.ServicesCredential?
  weak public var errorDelegate: TekCoreService.ServicesErrorDelegate?
  required public init()
  public func withErrorDelegate(_ delegate: TekCoreService.ServicesErrorDelegate)
  public func withCredential(_ credential: TekCoreService.ServicesCredential)
  public func createService() throws -> TekCoreService.CoreService
  @objc deinit
}
public struct StnConfig {
}
public class StnServiceInstanceGenerator : TerraInstancesManager.ServiceInstanceGeneratable {
  public typealias InstanceType = TekStnService.StnService
  public typealias ServiceFactory = TekStnService.StnServiceFactory
  required public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TerraStnSingleton : TerraInstancesManager.InstancesManageable {
  public typealias Generator = TekStnService.StnServiceInstanceGenerator
  public static var shared: TekStnService.TerraStnSingleton
  public var instances: [Swift.String : TekStnService.StnService]
  @objc deinit
}
public var TerraStn: TekStnService.TerraStnSingleton
