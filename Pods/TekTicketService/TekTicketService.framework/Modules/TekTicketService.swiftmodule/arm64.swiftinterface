// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name TekTicketService
import Foundation
import Swift
import TekCoreNetwork
import TekCoreService
import TekServiceInterfaces
@_exported import TekTicketService
import TerraInstancesManager
public class TicketService : TekCoreService.BasicWorkerService, TekServiceInterfaces.ITicketService {
  public var terminalCode: Swift.String
  public init(url: Foundation.URL, terminalCode: Swift.String, credential: TekCoreService.ServicesCredential?, errorDelegate: TekCoreService.ServicesErrorDelegate?)
  public func createTicket(payload: TekServiceInterfaces.TicketCreatePayload, completion: @escaping TekServiceInterfaces.TicketHandler)
  public func updateTicket(ticketId: Swift.Int, payload: TekServiceInterfaces.TicketUpdatePayload, completion: @escaping TekServiceInterfaces.TicketHandler)
  public func searchTicketById(_ ticketId: Swift.Int, completion: @escaping TekServiceInterfaces.TicketHandler)
  public func searchTicket(ticketCode: Swift.String?, orderCodes: [Swift.String], status: Swift.Int?, createdFrom: Foundation.Date?, createdTo: Foundation.Date?, page: Swift.Int?, size: Swift.Int?, completion: @escaping TekServiceInterfaces.TicketPageHandler)
  @objc deinit
  override public init(url: Foundation.URL, credential: TekCoreService.ServicesCredential? = super, errorDelegate: TekCoreService.ServicesErrorDelegate? = super)
}
@_inheritsConvenienceInitializers public class TicketConfigConverter : TekCoreService.BaseServiceConverter<TekTicketService.TicketConfig> {
  override public func convertConfig(rawValue: [Swift.String : Any]) -> TekTicketService.TicketConfig
  @objc deinit
  required public init(input: [Swift.String : Any])
}
public class TicketServiceInstanceGenerator : TerraInstancesManager.ServiceInstanceGeneratable {
  public typealias InstanceType = TekTicketService.TicketService
  public typealias ServiceFactory = TekTicketService.TicketServiceFactory
  required public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TerraTicketSingleton : TerraInstancesManager.InstancesManageable {
  public typealias Generator = TekTicketService.TicketServiceInstanceGenerator
  public static var shared: TekTicketService.TerraTicketSingleton
  public var instances: [Swift.String : TekTicketService.TicketService]
  @objc deinit
}
public var TerraTicket: TekTicketService.TerraTicketSingleton
public class TicketServiceFactory : TekCoreService.ServiceBuildable, TekCoreService.ServiceConverterSupportable, TekCoreService.ServiceCredentialAttachable, TekCoreService.ServiceErrorDelegateAttachable {
  public typealias ServiceConverter = TekTicketService.TicketConfigConverter
  public var serviceName: Swift.String
  public var rawConfig: [Swift.String : Any]
  public var credential: TekCoreService.ServicesCredential?
  weak public var errorDelegate: TekCoreService.ServicesErrorDelegate?
  required public init()
  public func withCredential(_ credential: TekCoreService.ServicesCredential)
  public func withErrorDelegate(_ delegate: TekCoreService.ServicesErrorDelegate)
  public func createService() throws -> TekCoreService.CoreService
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SearchTicketRequestPayload : Swift.Encodable {
  public func toDictionary() -> [Swift.String : Any]
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
}
public struct TicketConfig {
}
