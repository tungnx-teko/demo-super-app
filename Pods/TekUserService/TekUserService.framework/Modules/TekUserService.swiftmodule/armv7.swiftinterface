// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name TekUserService
import Foundation
import Swift
import TekCoreNetwork
import TekCoreService
import TekServiceInterfaces
@_exported import TekUserService
import TerraInstancesManager
public class UserServiceInstanceGenerator : TerraInstancesManager.ServiceInstanceGeneratable {
  public typealias InstanceType = TekUserService.UserService
  public typealias ServiceFactory = TekUserService.UserServiceFactory
  required public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class TerraUserSingleton : TerraInstancesManager.InstancesManageable {
  public typealias Generator = TekUserService.UserServiceInstanceGenerator
  public static var shared: TekUserService.TerraUserSingleton
  public var instances: [Swift.String : TekUserService.UserService]
  @objc deinit
}
public var TerraUser: TekUserService.TerraUserSingleton
public struct UserServiceConfig {
  public var url: Swift.String
  public var clientCode: Swift.String
}
@_inheritsConvenienceInitializers public class UserServiceConfigConverter : TekCoreService.BaseServiceConverter<TekUserService.UserServiceConfig> {
  override public func convertConfig(rawValue: [Swift.String : Any]) -> TekUserService.UserServiceConfig
  @objc deinit
  required public init(input: [Swift.String : Any])
}
public class UserService : TekCoreService.BasicWorkerService, TekServiceInterfaces.IUserService {
  public var clientCode: Swift.String
  public init(url: Foundation.URL, clientCode: Swift.String, credentials: TekCoreService.ServicesCredential?, errorDelegate: TekCoreService.ServicesErrorDelegate?)
  public func addAddress(address: TekServiceInterfaces.UserAddressParam, completion: @escaping (TekServiceInterfaces.IUserAddress?) -> ())
  public func updateAddress(address: TekServiceInterfaces.UserAddressParam, completion: @escaping (Swift.Bool) -> ())
  public func getListAddress(completion: @escaping ([TekServiceInterfaces.IUserAddress]) -> ())
  public func deleteAddress(id: Swift.String, completion: @escaping (Swift.Bool) -> ())
  public func getUserInfo(completion: @escaping (TekServiceInterfaces.IUserInfo?) -> ())
  public func updateUserInfo(userInfo: TekServiceInterfaces.UserInfoParam, completion: @escaping (TekServiceInterfaces.IUserInfo?) -> ())
  public func getLoyaltyBalance(completion: @escaping (TekServiceInterfaces.ILoyaltyBalance?) -> ())
  public func registerLoyaltyMembership(membership: TekServiceInterfaces.LoyaltyMembershipCreateParam, completion: @escaping (TekServiceInterfaces.IUserInfo?) -> ())
  @objc deinit
  override public init(url: Foundation.URL, credential: TekCoreService.ServicesCredential? = super, errorDelegate: TekCoreService.ServicesErrorDelegate? = super)
}
public class UserServiceFactory : TekCoreService.ServiceBuildable, TekCoreService.ServiceConverterSupportable, TekCoreService.ServiceCredentialAttachable, TekCoreService.ServiceErrorDelegateAttachable {
  public typealias ServiceConverter = TekUserService.UserServiceConfigConverter
  public var serviceName: Swift.String
  public var rawConfig: [Swift.String : Any]
  public var credential: TekCoreService.ServicesCredential?
  weak public var errorDelegate: TekCoreService.ServicesErrorDelegate?
  required public init()
  public func withCredential(_ credential: TekCoreService.ServicesCredential)
  public func withErrorDelegate(_ delegate: TekCoreService.ServicesErrorDelegate)
  public func createService() throws -> TekCoreService.CoreService
  @objc deinit
}
