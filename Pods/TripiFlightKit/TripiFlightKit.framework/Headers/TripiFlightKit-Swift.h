#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TripiFlightKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

















@class NSCoder;
@class UIEvent;

/// Checkbox is a simple, animation free checkbox and UISwitch alternative designed
/// to be performant and easy to implement.
SWIFT_CLASS("_TtC14TripiFlightKit8Checkbox") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface Checkbox : UIControl
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS("_TtC14TripiFlightKit8Localize")
@interface Localize : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>NBBottomSheetController</code> is an object that can be used to present bottom sheets.
SWIFT_CLASS("_TtC14TripiFlightKit23NBBottomSheetController")
@interface NBBottomSheetController : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end














SWIFT_CLASS("_TtC14TripiFlightKit19PopupViewController")
@interface PopupViewController : UIViewController
/// NOTE: Donâ€™t use this init method
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UIGestureRecognizer;
@class UITouch;

@interface PopupViewController (SWIFT_EXTENSION(TripiFlightKit)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@end

@class UIColor;
@class UIImage;

IB_DESIGNABLE
SWIFT_CLASS("_TtC14TripiFlightKit15RangeSeekSlider")
@interface RangeSeekSlider : UIControl
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// The minimum possible value to select in the range
@property (nonatomic) IBInspectable CGFloat minValue;
/// The maximum possible value to select in the range
@property (nonatomic) IBInspectable CGFloat maxValue;
/// The preselected minumum value
/// (note: This should be less than the selectedMaxValue)
@property (nonatomic) IBInspectable CGFloat selectedMinValue;
/// The preselected maximum value
/// (note: This should be greater than the selectedMinValue)
@property (nonatomic) IBInspectable CGFloat selectedMaxValue;
/// Hides the labels above the slider controls. true = labels will be hidden. false = labels will be shown. Default is false.
@property (nonatomic) IBInspectable BOOL hideLabels;
/// fixes the labels above the slider controls. true: labels will be fixed to both ends. false: labels will move with the handles. Default is false.
@property (nonatomic) IBInspectable BOOL labelsFixed;
/// The minimum distance the two selected slider values must be apart. Default is 0.
@property (nonatomic) IBInspectable CGFloat minDistance;
/// The maximum distance the two selected slider values must be apart. Default is CGFloat.greatestFiniteMagnitude.
@property (nonatomic) IBInspectable CGFloat maxDistance;
/// The color of the minimum value text label. If not set, the default is the tintColor.
@property (nonatomic, strong) IBInspectable UIColor * _Nullable minLabelColor;
/// The color of the maximum value text label. If not set, the default is the tintColor.
@property (nonatomic, strong) IBInspectable UIColor * _Nullable maxLabelColor;
/// Handle slider with custom color, you can set custom color for your handle
@property (nonatomic, strong) IBInspectable UIColor * _Nullable handleColor;
/// Handle slider with custom border color, you can set custom border color for your handle
@property (nonatomic, strong) IBInspectable UIColor * _Nullable handleBorderColor;
/// Set slider line tint color between handles
@property (nonatomic, strong) IBInspectable UIColor * _Nullable colorBetweenHandles;
/// The color of the entire slider when the handle is set to the minimum value and the maximum value. Default is nil.
@property (nonatomic, strong) IBInspectable UIColor * _Nullable initialColor;
/// If true, the control will mimic a normal slider and have only one handle rather than a range.
/// In this case, the selectedMinValue will be not functional anymore. Use selectedMaxValue instead to determine the value the user has selected.
@property (nonatomic) IBInspectable BOOL disableRange;
/// If true the control will snap to point at each step between minValue and maxValue. Default is false.
@property (nonatomic) IBInspectable BOOL enableStep;
/// The step value, this control the value of each step. If not set the default is 0.0.
/// (note: this is ignored if <= 0.0)
@property (nonatomic) IBInspectable CGFloat step;
/// Handle slider with custom image, you can set custom image for your handle
@property (nonatomic, strong) IBInspectable UIImage * _Nullable handleImage;
/// Handle diameter (default 16.0)
@property (nonatomic) IBInspectable CGFloat handleDiameter;
/// Selected handle diameter multiplier (default 1.7)
@property (nonatomic) IBInspectable CGFloat selectedHandleDiameterMultiplier;
/// Set the slider line height (default 1.0)
@property (nonatomic) IBInspectable CGFloat lineHeight;
/// Handle border width (default 0.0)
@property (nonatomic) IBInspectable CGFloat handleBorderWidth;
/// Set padding between label and handle (default 8.0)
@property (nonatomic) IBInspectable CGFloat labelPadding;
/// The label displayed in accessibility mode for minimum value handler. If not set, the default is empty String.
@property (nonatomic, copy) IBInspectable NSString * _Nullable minLabelAccessibilityLabel;
/// The label displayed in accessibility mode for maximum value handler. If not set, the default is empty String.
@property (nonatomic, copy) IBInspectable NSString * _Nullable maxLabelAccessibilityLabel;
/// The brief description displayed in accessibility mode for minimum value handler. If not set, the default is empty String.
@property (nonatomic, copy) IBInspectable NSString * _Nullable minLabelAccessibilityHint;
/// The brief description displayed in accessibility mode for maximum value handler. If not set, the default is empty String.
@property (nonatomic, copy) IBInspectable NSString * _Nullable maxLabelAccessibilityHint;
- (void)layoutSubviews;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (BOOL)continueTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
- (NSInteger)accessibilityElementCount SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)accessibilityElementAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)indexOfAccessibilityElement:(id _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
@end






@interface UIButton (SWIFT_EXTENSION(TripiFlightKit))
@property (nonatomic, copy) IBInspectable NSString * _Nullable localizeKey;
@end
























































@interface UILabel (SWIFT_EXTENSION(TripiFlightKit))
@property (nonatomic, copy) IBInspectable NSString * _Nullable localizeKey;
@end






@interface UILabel (SWIFT_EXTENSION(TripiFlightKit))
@property (nonatomic) IBInspectable NSInteger lastLineFillPercent;
@property (nonatomic) IBInspectable NSInteger linesCornerRadius;
@property (nonatomic) IBInspectable CGFloat skeletonLineSpacing;
@property (nonatomic) IBInspectable UIEdgeInsets skeletonPaddingInsets;
@end










@interface UINavigationItem (SWIFT_EXTENSION(TripiFlightKit))
@property (nonatomic, copy) IBInspectable NSString * _Nullable localizeKey;
@end






















@interface UITextField (SWIFT_EXTENSION(TripiFlightKit))
@property (nonatomic, copy) IBInspectable NSString * _Nullable localizeKey;
@end






@interface UITextView (SWIFT_EXTENSION(TripiFlightKit))
@property (nonatomic, copy) IBInspectable NSString * _Nullable localizeKey;
@end




@interface UITextView (SWIFT_EXTENSION(TripiFlightKit))
@property (nonatomic) IBInspectable NSInteger lastLineFillPercent;
@property (nonatomic) IBInspectable NSInteger linesCornerRadius;
@property (nonatomic) IBInspectable CGFloat skeletonLineSpacing;
@property (nonatomic) IBInspectable UIEdgeInsets skeletonPaddingInsets;
@end



















































#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TripiFlightKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

















@class NSCoder;
@class UIEvent;

/// Checkbox is a simple, animation free checkbox and UISwitch alternative designed
/// to be performant and easy to implement.
SWIFT_CLASS("_TtC14TripiFlightKit8Checkbox") SWIFT_AVAILABILITY(ios,introduced=10.0)
@interface Checkbox : UIControl
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS("_TtC14TripiFlightKit8Localize")
@interface Localize : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>NBBottomSheetController</code> is an object that can be used to present bottom sheets.
SWIFT_CLASS("_TtC14TripiFlightKit23NBBottomSheetController")
@interface NBBottomSheetController : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end














SWIFT_CLASS("_TtC14TripiFlightKit19PopupViewController")
@interface PopupViewController : UIViewController
/// NOTE: Donâ€™t use this init method
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UIGestureRecognizer;
@class UITouch;

@interface PopupViewController (SWIFT_EXTENSION(TripiFlightKit)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@end

@class UIColor;
@class UIImage;

IB_DESIGNABLE
SWIFT_CLASS("_TtC14TripiFlightKit15RangeSeekSlider")
@interface RangeSeekSlider : UIControl
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// The minimum possible value to select in the range
@property (nonatomic) IBInspectable CGFloat minValue;
/// The maximum possible value to select in the range
@property (nonatomic) IBInspectable CGFloat maxValue;
/// The preselected minumum value
/// (note: This should be less than the selectedMaxValue)
@property (nonatomic) IBInspectable CGFloat selectedMinValue;
/// The preselected maximum value
/// (note: This should be greater than the selectedMinValue)
@property (nonatomic) IBInspectable CGFloat selectedMaxValue;
/// Hides the labels above the slider controls. true = labels will be hidden. false = labels will be shown. Default is false.
@property (nonatomic) IBInspectable BOOL hideLabels;
/// fixes the labels above the slider controls. true: labels will be fixed to both ends. false: labels will move with the handles. Default is false.
@property (nonatomic) IBInspectable BOOL labelsFixed;
/// The minimum distance the two selected slider values must be apart. Default is 0.
@property (nonatomic) IBInspectable CGFloat minDistance;
/// The maximum distance the two selected slider values must be apart. Default is CGFloat.greatestFiniteMagnitude.
@property (nonatomic) IBInspectable CGFloat maxDistance;
/// The color of the minimum value text label. If not set, the default is the tintColor.
@property (nonatomic, strong) IBInspectable UIColor * _Nullable minLabelColor;
/// The color of the maximum value text label. If not set, the default is the tintColor.
@property (nonatomic, strong) IBInspectable UIColor * _Nullable maxLabelColor;
/// Handle slider with custom color, you can set custom color for your handle
@property (nonatomic, strong) IBInspectable UIColor * _Nullable handleColor;
/// Handle slider with custom border color, you can set custom border color for your handle
@property (nonatomic, strong) IBInspectable UIColor * _Nullable handleBorderColor;
/// Set slider line tint color between handles
@property (nonatomic, strong) IBInspectable UIColor * _Nullable colorBetweenHandles;
/// The color of the entire slider when the handle is set to the minimum value and the maximum value. Default is nil.
@property (nonatomic, strong) IBInspectable UIColor * _Nullable initialColor;
/// If true, the control will mimic a normal slider and have only one handle rather than a range.
/// In this case, the selectedMinValue will be not functional anymore. Use selectedMaxValue instead to determine the value the user has selected.
@property (nonatomic) IBInspectable BOOL disableRange;
/// If true the control will snap to point at each step between minValue and maxValue. Default is false.
@property (nonatomic) IBInspectable BOOL enableStep;
/// The step value, this control the value of each step. If not set the default is 0.0.
/// (note: this is ignored if <= 0.0)
@property (nonatomic) IBInspectable CGFloat step;
/// Handle slider with custom image, you can set custom image for your handle
@property (nonatomic, strong) IBInspectable UIImage * _Nullable handleImage;
/// Handle diameter (default 16.0)
@property (nonatomic) IBInspectable CGFloat handleDiameter;
/// Selected handle diameter multiplier (default 1.7)
@property (nonatomic) IBInspectable CGFloat selectedHandleDiameterMultiplier;
/// Set the slider line height (default 1.0)
@property (nonatomic) IBInspectable CGFloat lineHeight;
/// Handle border width (default 0.0)
@property (nonatomic) IBInspectable CGFloat handleBorderWidth;
/// Set padding between label and handle (default 8.0)
@property (nonatomic) IBInspectable CGFloat labelPadding;
/// The label displayed in accessibility mode for minimum value handler. If not set, the default is empty String.
@property (nonatomic, copy) IBInspectable NSString * _Nullable minLabelAccessibilityLabel;
/// The label displayed in accessibility mode for maximum value handler. If not set, the default is empty String.
@property (nonatomic, copy) IBInspectable NSString * _Nullable maxLabelAccessibilityLabel;
/// The brief description displayed in accessibility mode for minimum value handler. If not set, the default is empty String.
@property (nonatomic, copy) IBInspectable NSString * _Nullable minLabelAccessibilityHint;
/// The brief description displayed in accessibility mode for maximum value handler. If not set, the default is empty String.
@property (nonatomic, copy) IBInspectable NSString * _Nullable maxLabelAccessibilityHint;
- (void)layoutSubviews;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (BOOL)continueTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
- (NSInteger)accessibilityElementCount SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)accessibilityElementAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)indexOfAccessibilityElement:(id _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
@end






@interface UIButton (SWIFT_EXTENSION(TripiFlightKit))
@property (nonatomic, copy) IBInspectable NSString * _Nullable localizeKey;
@end
























































@interface UILabel (SWIFT_EXTENSION(TripiFlightKit))
@property (nonatomic, copy) IBInspectable NSString * _Nullable localizeKey;
@end






@interface UILabel (SWIFT_EXTENSION(TripiFlightKit))
@property (nonatomic) IBInspectable NSInteger lastLineFillPercent;
@property (nonatomic) IBInspectable NSInteger linesCornerRadius;
@property (nonatomic) IBInspectable CGFloat skeletonLineSpacing;
@property (nonatomic) IBInspectable UIEdgeInsets skeletonPaddingInsets;
@end










@interface UINavigationItem (SWIFT_EXTENSION(TripiFlightKit))
@property (nonatomic, copy) IBInspectable NSString * _Nullable localizeKey;
@end






















@interface UITextField (SWIFT_EXTENSION(TripiFlightKit))
@property (nonatomic, copy) IBInspectable NSString * _Nullable localizeKey;
@end






@interface UITextView (SWIFT_EXTENSION(TripiFlightKit))
@property (nonatomic, copy) IBInspectable NSString * _Nullable localizeKey;
@end




@interface UITextView (SWIFT_EXTENSION(TripiFlightKit))
@property (nonatomic) IBInspectable NSInteger lastLineFillPercent;
@property (nonatomic) IBInspectable NSInteger linesCornerRadius;
@property (nonatomic) IBInspectable CGFloat skeletonLineSpacing;
@property (nonatomic) IBInspectable UIEdgeInsets skeletonPaddingInsets;
@end



















































#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
