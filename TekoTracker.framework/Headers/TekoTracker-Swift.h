// Generated by Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
#ifndef TEKOTRACKER_SWIFT_H
#define TEKOTRACKER_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#import <TekoTracker/TekoTracker.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TekoTracker",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class FlattenExtraAttribute;

SWIFT_CLASS("_TtC11TekoTracker14AlertEventData")
@interface AlertEventData : NSObject <EventDataProtocol>
@property (nonatomic, copy) NSString * _Nullable channel;
@property (nonatomic, copy) NSString * _Nullable terminal;
@property (nonatomic, copy) NSString * _Nonnull alertType;
@property (nonatomic, copy) NSString * _Nonnull alertMessage;
@property (nonatomic, strong) FlattenExtraAttribute * _Nullable extra;
- (nonnull instancetype)initWithChannel:(NSString * _Nullable)channel terminal:(NSString * _Nullable)terminal alertType:(NSString * _Nonnull)alertType alertMessage:(NSString * _Nonnull)alertMessage extra:(FlattenExtraAttribute * _Nullable)extra OBJC_DESIGNATED_INITIALIZER;
- (NSData * _Nonnull)asData:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNumber;

SWIFT_CLASS("_TtC11TekoTracker13CartEventData")
@interface CartEventData : NSObject <EventDataProtocol>
@property (nonatomic, copy) NSString * _Nonnull cartID;
@property (nonatomic, copy) NSString * _Nonnull sku;
@property (nonatomic, copy) NSString * _Nonnull name;
/// Default price
@property (nonatomic) double price;
/// Final price
@property (nonatomic, strong) NSNumber * _Nullable promotionPrice SWIFT_UNAVAILABLE_MSG("Unavailable in Swift");
@property (nonatomic) NSInteger quantity;
/// Promotion IDs
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull promotions;
@property (nonatomic, copy) NSString * _Nullable coupon;
@property (nonatomic, copy) NSString * _Nonnull status SWIFT_UNAVAILABLE_MSG("Unavailable in Swift");
@property (nonatomic, strong) FlattenExtraAttribute * _Nullable extra;
- (nonnull instancetype)initWithCartID:(NSString * _Nonnull)cartID sku:(NSString * _Nonnull)sku name:(NSString * _Nonnull)name price:(double)price promotionPrice:(NSNumber * _Nullable)promotionPrice quantity:(NSInteger)quantity currency:(NSString * _Nonnull)currency promotions:(NSArray<NSString *> * _Nonnull)promotions coupon:(NSString * _Nullable)coupon status:(NSString * _Nonnull)status extra:(FlattenExtraAttribute * _Nullable)extra OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Unavailable in Swift");
- (NSData * _Nonnull)asData:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class EcommerceProduct;

SWIFT_CLASS("_TtC11TekoTracker17CheckoutEventData")
@interface CheckoutEventData : NSObject <EventDataProtocol>
@property (nonatomic, copy) NSString * _Nonnull orderID;
@property (nonatomic) double grandTotal;
@property (nonatomic) double amountBeforeDiscount;
@property (nonatomic) double tax;
@property (nonatomic) double discountAmount;
@property (nonatomic, copy) NSArray<EcommerceProduct *> * _Nonnull products;
@property (nonatomic, copy) NSString * _Nonnull note;
@property (nonatomic) double shippingFee;
@property (nonatomic, copy) NSString * _Nullable shippingPartner;
@property (nonatomic, copy) NSString * _Nullable shippingAddressCode;
@property (nonatomic, copy) NSString * _Nullable shippingProvince;
@property (nonatomic, copy) NSString * _Nullable shippingDistrict;
@property (nonatomic, copy) NSString * _Nullable shippingWard;
@property (nonatomic, copy) NSString * _Nullable shippingStreet;
@property (nonatomic, copy) NSString * _Nullable shippingAddress;
@property (nonatomic, copy) NSString * _Nonnull paymentMethod SWIFT_UNAVAILABLE_MSG("Unavailable in Swift");
@property (nonatomic, copy) NSString * _Nullable paymentBank;
@property (nonatomic, copy) NSString * _Nonnull status SWIFT_UNAVAILABLE_MSG("Unavailable in Swift");
/// Extra info
@property (nonatomic, strong) FlattenExtraAttribute * _Nullable extra;
- (nonnull instancetype)initWithOrderID:(NSString * _Nonnull)orderID grandTotal:(double)grandTotal amountBeforeDiscount:(double)amountBeforeDiscount tax:(double)tax discountAmount:(double)discountAmount products:(NSArray<EcommerceProduct *> * _Nonnull)products paymentMethod:(NSString * _Nonnull)paymentMethod paymentBank:(NSString * _Nullable)paymentBank shippingFee:(double)shippingFee shippingPartner:(NSString * _Nullable)shippingPartner shippingAddressCode:(NSString * _Nullable)shippingAddressCode shippingProvince:(NSString * _Nullable)shippingProvince shippingDistrict:(NSString * _Nullable)shippingDistrict shippingWard:(NSString * _Nullable)shippingWard shippingStreet:(NSString * _Nullable)shippingStreet shippingAddress:(NSString * _Nullable)shippingAddress note:(NSString * _Nonnull)note status:(NSString * _Nonnull)status extra:(FlattenExtraAttribute * _Nullable)extra OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Unavailable in Swift");
- (NSData * _Nonnull)asData:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("Product")
@interface EcommerceProduct : NSObject
@property (nonatomic, copy) NSString * _Nonnull sku;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic) double price;
/// Final price
@property (nonatomic, strong) NSNumber * _Nullable promotionPrice SWIFT_UNAVAILABLE_MSG("Unavailable in Swift");
@property (nonatomic) NSInteger quantity;
- (nonnull instancetype)initWithSku:(NSString * _Nonnull)sku name:(NSString * _Nonnull)name price:(double)price promotionPrice:(NSNumber * _Nullable)promotionPrice quantity:(NSInteger)quantity OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Unavailable in Swift");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11TekoTracker15CustomEventData")
@interface CustomEventData : NSObject <EventDataProtocol>
@property (nonatomic, copy) NSString * _Nullable utmSource;
@property (nonatomic, copy) NSString * _Nullable utmTerm;
@property (nonatomic, copy) NSString * _Nullable utmCampaign;
@property (nonatomic, copy) NSString * _Nullable utmMedium;
@property (nonatomic, copy) NSString * _Nullable utmContent;
@property (nonatomic, copy) NSString * _Nullable channel;
@property (nonatomic, copy) NSString * _Nullable terminal;
@property (nonatomic, copy) NSString * _Nullable property;
@property (nonatomic, copy) NSString * _Nullable category;
@property (nonatomic, copy) NSString * _Nullable action;
@property (nonatomic, copy) NSString * _Nullable label;
@property (nonatomic, strong) NSNumber * _Nullable value SWIFT_UNAVAILABLE_MSG("Unavailable in Swift");
@property (nonatomic, strong) FlattenExtraAttribute * _Nullable extra;
- (nonnull instancetype)initWithUtmSource:(NSString * _Nullable)utmSource utmTerm:(NSString * _Nullable)utmTerm utmCampaign:(NSString * _Nullable)utmCampaign utmMedium:(NSString * _Nullable)utmMedium utmContent:(NSString * _Nullable)utmContent channel:(NSString * _Nullable)channel terminal:(NSString * _Nullable)terminal property:(NSString * _Nullable)property category:(NSString * _Nullable)category action:(NSString * _Nullable)action label:(NSString * _Nullable)label value:(NSNumber * _Nullable)value extra:(FlattenExtraAttribute * _Nullable)extra OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Unavailable in Swift");
- (NSData * _Nonnull)asData:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11TekoTracker14ErrorEventData")
@interface ErrorEventData : NSObject <EventDataProtocol>
@property (nonatomic, copy) NSString * _Nonnull errorSource SWIFT_UNAVAILABLE_MSG("Unavailable in Swift");
@property (nonatomic, copy) NSString * _Nonnull apiCall;
@property (nonatomic, copy) NSString * _Nullable apiPayload;
@property (nonatomic) NSInteger httpResponseCode;
@property (nonatomic, copy) NSString * _Nullable responseJson;
@property (nonatomic, copy) NSString * _Nonnull errorCode;
@property (nonatomic, copy) NSString * _Nonnull errorMessage;
@property (nonatomic, strong) FlattenExtraAttribute * _Nullable extra;
- (nonnull instancetype)initWithErrorSource:(NSString * _Nonnull)errorSource apiCall:(NSString * _Nonnull)apiCall apiPayload:(NSString * _Nullable)apiPayload httpResponseCode:(NSInteger)httpResponseCode responseJson:(NSString * _Nullable)responseJson errorCode:(NSString * _Nonnull)errorCode errorMessage:(NSString * _Nonnull)errorMessage extra:(FlattenExtraAttribute * _Nullable)extra OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Unavailable in Swift");
- (NSData * _Nonnull)asData:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11TekoTracker21FlattenExtraAttribute")
@interface FlattenExtraAttribute : NSObject
@property (nonatomic, copy) NSString * _Nullable first;
@property (nonatomic, copy) NSString * _Nullable second;
@property (nonatomic, copy) NSString * _Nullable third;
@property (nonatomic, copy) NSString * _Nullable fourth;
@property (nonatomic, copy) NSString * _Nullable fifth;
- (nonnull instancetype)initWithFirst:(NSString * _Nullable)first second:(NSString * _Nullable)second third:(NSString * _Nullable)third fourth:(NSString * _Nullable)fourth fifth:(NSString * _Nullable)fifth OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSValue;

SWIFT_CLASS("_TtC11TekoTracker20InteractionEventData")
@interface InteractionEventData : NSObject <EventDataProtocol>
@property (nonatomic, copy) NSString * _Nonnull interaction SWIFT_UNAVAILABLE_MSG("Unavailable in Swift");
@property (nonatomic, copy) NSString * _Nonnull regionName;
@property (nonatomic, copy) NSString * _Nonnull contentName;
@property (nonatomic, copy) NSString * _Nonnull target;
@property (nonatomic) id _Nullable payload;
@property (nonatomic, strong) NSValue * _Nullable relativePosition SWIFT_UNAVAILABLE_MSG("Unavailable in Swift");
@property (nonatomic, strong) NSValue * _Nullable absolutePosition SWIFT_UNAVAILABLE_MSG("Unavailable in Swift");
- (nonnull instancetype)initWithRegionName:(NSString * _Nonnull)regionName contentName:(NSString * _Nonnull)contentName target:(NSString * _Nonnull)target payload:(id _Nullable)payload relativePosition:(NSValue * _Nullable)relativePosition absolutePosition:(NSValue * _Nullable)absolutePosition OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithInteraction:(NSString * _Nonnull)interaction regionName:(NSString * _Nonnull)regionName contentName:(NSString * _Nonnull)contentName target:(NSString * _Nonnull)target payload:(id _Nullable)payload relativePosition:(NSValue * _Nullable)relativePosition absolutePosition:(NSValue * _Nullable)absolutePosition OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Unavailable in Swift");
- (NSData * _Nonnull)asData:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11TekoTracker16PaymentEventData")
@interface PaymentEventData : NSObject <EventDataProtocol>
@property (nonatomic, copy) NSString * _Nonnull orderID;
@property (nonatomic, copy) NSString * _Nullable referral;
@property (nonatomic) double amount;
@property (nonatomic, copy) NSString * _Nonnull paymentMethod SWIFT_UNAVAILABLE_MSG("Unavailable in Swift");
@property (nonatomic, copy) NSString * _Nullable paymentBank;
@property (nonatomic, copy) NSString * _Nonnull status SWIFT_UNAVAILABLE_MSG("Unavailable in Swift");
@property (nonatomic, strong) NSNumber * _Nullable statusCode SWIFT_UNAVAILABLE_MSG("Unavailable in Swift");
- (nonnull instancetype)initWithOrderID:(NSString * _Nonnull)orderID referral:(NSString * _Nullable)referral amount:(double)amount paymentMethod:(NSString * _Nonnull)paymentMethod paymentBank:(NSString * _Nullable)paymentBank status:(NSString * _Nonnull)status statusCode:(NSNumber * _Nullable)statusCode OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Unavailable in Swift");
- (NSData * _Nonnull)asData:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11TekoTracker26PerformanceTimingEventData")
@interface PerformanceTimingEventData : NSObject <EventDataProtocol>
@property (nonatomic, copy) NSString * _Nullable channel;
@property (nonatomic, copy) NSString * _Nullable terminal;
@property (nonatomic, copy) NSString * _Nonnull category;
@property (nonatomic, copy) NSString * _Nonnull action;
@property (nonatomic) id _Nullable actionParam;
@property (nonatomic) NSTimeInterval actionStartAt;
@property (nonatomic) NSTimeInterval actionEndAt;
@property (nonatomic, strong) FlattenExtraAttribute * _Nullable extra;
- (nonnull instancetype)initWithChannel:(NSString * _Nullable)channel terminal:(NSString * _Nullable)terminal category:(NSString * _Nonnull)category action:(NSString * _Nonnull)action actionParam:(id _Nullable)actionParam actionStartAt:(NSTimeInterval)actionStartAt actionEndAt:(NSTimeInterval)actionEndAt extra:(FlattenExtraAttribute * _Nullable)extra OBJC_DESIGNATED_INITIALIZER;
- (NSData * _Nonnull)asData:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11TekoTracker19ScreenViewEventData")
@interface ScreenViewEventData : NSObject <EventDataProtocol>
@property (nonatomic, readonly, copy) NSString * _Nonnull referrerScreenName;
@property (nonatomic, copy) NSString * _Nonnull screenName;
@property (nonatomic, copy) NSString * _Nonnull contentType;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable href;
@property (nonatomic, strong) FlattenExtraAttribute * _Nullable extra;
@property (nonatomic) NSTimeInterval navigationStart;
@property (nonatomic) NSTimeInterval loadEventEnd;
- (nonnull instancetype)initWithScreenName:(NSString * _Nonnull)screenName contentType:(NSString * _Nonnull)contentType title:(NSString * _Nullable)title href:(NSString * _Nullable)href extra:(FlattenExtraAttribute * _Nullable)extra navigationStart:(NSTimeInterval)navigationStart loadEventEnd:(NSTimeInterval)loadEventEnd OBJC_DESIGNATED_INITIALIZER;
- (NSData * _Nonnull)asData:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11TekoTracker20ProductViewEventData")
@interface ProductViewEventData : ScreenViewEventData
@property (nonatomic, copy) NSString * _Nonnull sku;
@property (nonatomic, copy) NSString * _Nonnull productName;
@property (nonatomic, copy) NSString * _Nonnull channel;
@property (nonatomic, copy) NSString * _Nonnull terminal;
- (nonnull instancetype)initWithScreenName:(NSString * _Nonnull)screenName sku:(NSString * _Nonnull)sku productName:(NSString * _Nonnull)productName channel:(NSString * _Nonnull)channel terminal:(NSString * _Nonnull)terminal contentType:(NSString * _Nonnull)contentType title:(NSString * _Nullable)title href:(NSString * _Nullable)href extra:(FlattenExtraAttribute * _Nullable)extra navigationStart:(NSTimeInterval)navigationStart loadEventEnd:(NSTimeInterval)loadEventEnd OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithScreenName:(NSString * _Nonnull)screenName contentType:(NSString * _Nonnull)contentType title:(NSString * _Nullable)title href:(NSString * _Nullable)href extra:(FlattenExtraAttribute * _Nullable)extra navigationStart:(NSTimeInterval)navigationStart loadEventEnd:(NSTimeInterval)loadEventEnd SWIFT_UNAVAILABLE;
@end



@class SearchParams;

SWIFT_CLASS("_TtC11TekoTracker15SearchEventData")
@interface SearchEventData : NSObject <EventDataProtocol>
@property (nonatomic, strong) SearchParams * _Nonnull params;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull keywords;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull sort;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull order;
- (nonnull instancetype)initWithParams:(SearchParams * _Nonnull)params keywords:(NSArray<NSString *> * _Nonnull)keywords sort:(NSArray<NSString *> * _Nonnull)sort order:(NSArray<NSString *> * _Nonnull)order OBJC_DESIGNATED_INITIALIZER;
- (NSData * _Nonnull)asData:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SearchEventData (SWIFT_EXTENSION(TekoTracker))
@end


SWIFT_CLASS_NAMED("Params")
@interface SearchParams : NSObject
@property (nonatomic, copy) NSString * _Nonnull channel;
@property (nonatomic, copy) NSString * _Nonnull terminal;
@property (nonatomic, copy) NSString * _Nonnull keyword;
@property (nonatomic) NSInteger page;
@property (nonatomic) NSInteger limit;
@property (nonatomic, strong) NSNumber * _Nullable minPrice SWIFT_UNAVAILABLE_MSG("Unavailable in Swift");
@property (nonatomic, strong) NSNumber * _Nullable maxPrice SWIFT_UNAVAILABLE_MSG("Unavailable in Swift");
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull objectives;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull productLines;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull saleStatuses;
/// Brand codes
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull brands;
/// Category IDs
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull categories;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull saleCategories;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull attributeSets;
@property (nonatomic) BOOL hasPromotions;
- (nonnull instancetype)initWithChannel:(NSString * _Nonnull)channel terminal:(NSString * _Nonnull)terminal keyword:(NSString * _Nonnull)keyword page:(NSInteger)page limit:(NSInteger)limit sort:(NSArray<NSString *> * _Nonnull)sort order:(NSArray<NSString *> * _Nonnull)order minPrice:(NSNumber * _Nullable)minPrice maxPrice:(NSNumber * _Nullable)maxPrice objectives:(NSArray<NSString *> * _Nonnull)objectives productLines:(NSArray<NSString *> * _Nonnull)productLines saleStatuses:(NSArray<NSString *> * _Nonnull)saleStatuses brands:(NSArray<NSString *> * _Nonnull)brands categories:(NSArray<NSString *> * _Nonnull)categories saleCategories:(NSArray<NSString *> * _Nonnull)saleCategories attributeSets:(NSArray<NSString *> * _Nonnull)attributeSets hasPromotions:(BOOL)hasPromotions OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE_MSG("Unavailable in Swift");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11TekoTracker15TimingEventData")
@interface TimingEventData : NSObject <EventDataProtocol>
@property (nonatomic, copy) NSString * _Nullable channel;
@property (nonatomic, copy) NSString * _Nullable category;
@property (nonatomic, copy) NSString * _Nullable variable;
@property (nonatomic, copy) NSString * _Nullable label;
@property (nonatomic) NSTimeInterval duration;
@property (nonatomic, strong) FlattenExtraAttribute * _Nullable extra;
- (nonnull instancetype)initWithChannel:(NSString * _Nullable)channel category:(NSString * _Nullable)category variable:(NSString * _Nullable)variable label:(NSString * _Nullable)label duration:(NSTimeInterval)duration extra:(FlattenExtraAttribute * _Nullable)extra OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDuration:(NSTimeInterval)duration OBJC_DESIGNATED_INITIALIZER;
- (NSData * _Nonnull)asData:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol TrackerConfigurable;

SWIFT_CLASS("_TtC11TekoTracker7Tracker")
@interface Tracker : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Tracker * _Nonnull shared;)
+ (Tracker * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)configureWithConfig:(id <TrackerConfigurable> _Nullable)config;
+ (void)configureWithConfigFileURL:(NSURL * _Nullable)configFileURL;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface Tracker (SWIFT_EXTENSION(TekoTracker))
+ (void)configureMock;
@end

@protocol EventTypeProtocol;

SWIFT_UNAVAILABLE_MSG("Unavailable in Swift")
@interface Tracker (SWIFT_EXTENSION(TekoTracker)) <TrackingProtocol>
- (void)useForUserID:(NSString * _Nonnull)userID phoneNumber:(NSString * _Nullable)phoneNumber;
- (void)sendWithEventType:(id <EventTypeProtocol> _Nonnull)eventType eventName:(NSString * _Nonnull)eventName data:(id <EventDataProtocol> _Nonnull)data isImmediate:(BOOL)isImmediate;
@end






SWIFT_CLASS("_TtC11TekoTracker23VisibleContentEventData")
@interface VisibleContentEventData : NSObject <EventDataProtocol>
@property (nonatomic) NSInteger index;
@property (nonatomic, copy) NSString * _Nonnull regionName;
@property (nonatomic, copy) NSString * _Nonnull contentName;
- (nonnull instancetype)initWithIndex:(NSInteger)index regionName:(NSString * _Nonnull)regionName contentName:(NSString * _Nonnull)contentName OBJC_DESIGNATED_INITIALIZER;
- (NSData * _Nonnull)asData:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
