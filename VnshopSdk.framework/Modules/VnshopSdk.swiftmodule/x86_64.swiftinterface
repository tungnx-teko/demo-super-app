// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name VnshopSdk
import AVFoundation
import AuthenticationServices
import BSImagePicker
import CommonCrypto
import CommonCrypto/*.CC_LONG*/
import CommonCrypto/*.CC_MD5*/
import CommonCrypto/*.CC_MD5_DIGEST_LENGTH*/
import CoreGraphics
import CoreLocation
import DeviceKit
import DifferenceKit
import FBSDKLoginKit
import FacebookCore
import Firebase
import FirebaseAnalytics
import FirebaseCore
import FirebaseDatabase
import FirebaseDynamicLinks
import FirebaseMessaging
import FirebasePlugin
import FittedSheets
import Foundation
import GooglePlaces
import GoogleSignIn
import Hestia
import HestiaIOS
import Janus
import Kingfisher
import Minerva
import MultiplatformCart
import Photos
import QuartzCore
import Realm
import RealmSwift
import RxCocoa
import RxRealm
import RxSwift
import Security
import SkeletonView
import Swift
import SystemConfiguration
import TTTAttributedLabel
import TekCoreNetwork
import TekCoreService
import TekCoreUploader
import TekCrmService
import TekDiscoveryService
import TekIdentityService
import TekListingService
import TekLocationService
import TekOrderService
import TekPolicyService
import TekPpmService
import TekSearchService
import TekServiceInterfaces
import TekStnService
import TekTicketService
import TekUserService
import TekoMediaPreview
import TekoTracker
import Terra
import TerraInstancesManager
import Toast_Swift
import UIColor_Hex_Swift
import UIKit
import UserNotifications
import VPAttributedFormat
@_exported import VnshopSdk
import WebKit
public var terraApp: TerraInstancesManager.ITerraApp
@_hasMissingDesignatedInitializers public class TerraInstanceCenter {
  public static var shared: VnshopSdk.TerraInstanceCenter
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class RippleButton : UIKit.UIButton {
  @objc @IBInspectable open var ripplePercent: Swift.Float {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable open var rippleColor: UIKit.UIColor {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable open var rippleBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable open var buttonCornerRadius: Swift.Float {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable open var rippleOverBounds: Swift.Bool
  @objc @IBInspectable open var shadowRippleRadius: Swift.Float
  @objc @IBInspectable open var shadowRippleEnable: Swift.Bool
  @objc @IBInspectable open var trackTouchLocation: Swift.Bool
  @objc @IBInspectable open var touchUpAnimationTime: Swift.Double
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc override dynamic open func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc override dynamic open func cancelTracking(with event: UIKit.UIEvent?)
  @objc override dynamic open func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @objc override dynamic open func layoutSubviews()
  @objc deinit
}
public enum DefinitionType : Swift.String {
  case product
  case order
  case coupon
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum DiscountType : Swift.String {
  case money
  case percent
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum CartConstants {
}
public struct CartShippingInfoPayload : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CartCheckoutPayload : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CartInvoiceInfoPayload : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CartSellerNotePayload : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CartCustomerInfoPayload : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol ICartAvailablePaymentMethods {
  var merchantCode: Swift.String { get }
  var paymentMethods: [VnshopSdk.ICartPaymentMethod] { get }
  var deposit: VnshopSdk.ICartDeposit? { get }
}
public protocol ICartDeposit {
  var payNowAmount: Swift.Double { get }
  var applyDepositIds: [Swift.String] { get }
  var allowDeposit: Swift.Bool { get }
}
public protocol ICartPaymentMethod {
  var displayName: Swift.String { get }
  var partnerCode: Swift.String { get }
  var displayIcon: Swift.String { get }
  var discountCodes: [Swift.String] { get }
  var displayText: Swift.String { get }
  var methodGroupCode: Swift.String { get }
  var token: Swift.String? { get }
  var merchantMethodCode: Swift.String { get }
  var methodCode: Swift.String { get }
}
public protocol ICartBaseGift : VnshopSdk.ICartWithBudget {
  var imageUrl: Swift.String? { get }
  var sku: Swift.String { get }
  var quantity: Swift.Int32 { get }
  var maxQuantityPerOrderValue: Swift.Int? { get }
  var name: Swift.String { get }
}
public protocol ICartBaseDiscount : VnshopSdk.ICartWithBudget {
  var id: Swift.Int? { get }
  var percentValue: Swift.Double? { get }
  var flatValue: Swift.Double? { get }
  var maxAmountValue: Swift.Double? { get }
  var maxAmountPerOrderValue: Swift.Double? { get }
}
public protocol ICartBaseSkuCondition {
  var sku: Swift.String { get }
}
public protocol ICartBaseCondition {
  var orderValueMinValue: Swift.Double? { get }
  var orderValueMaxValue: Swift.Double? { get }
  var coupon: Swift.String? { get }
  var paymentMethods: [Swift.String] { get }
  var skusValue: [VnshopSdk.ICartBaseSkuCondition] { get }
  var localSkusValue: [Swift.String] { get }
  var blockSize: Swift.Int32 { get }
  var minQuantity: Swift.Int32 { get }
  var exclusionsValue: [VnshopSdk.ICartBaseExclusion] { get }
}
public protocol ICartBaseAppliedPromotion {
  var id: Swift.Int32 { get }
  var name: Swift.String { get }
  var description: Swift.String { get }
  var benefitValue: VnshopSdk.ICartBaseBenefit { get }
}
public protocol ICartBaseSeller {
  var id: Swift.Int32 { get }
  var displayName: Swift.String? { get }
  var name: Swift.String? { get }
  var logo: Swift.String? { get }
}
public protocol ICartBaseBenefit {
  var discountValue: VnshopSdk.ICartBaseDiscount? { get }
  var giftsValue: [VnshopSdk.ICartBaseGift] { get }
  var voucherValue: VnshopSdk.ICartBaseVoucher? { get }
}
public protocol ICartBaseProductInfo {
  var sku: Swift.String { get }
  var name: Swift.String { get }
  var sellerValue: VnshopSdk.ICartBaseSeller? { get }
  var categories: [VnshopSdk.ICartCategory] { get }
  var masterCategories: [VnshopSdk.ICartCategory] { get }
  var provider: VnshopSdk.ICartProvider? { get }
  var tax: VnshopSdk.ICartTax? { get }
  var brand: VnshopSdk.ICartBrand? { get }
  var tags: [Swift.String] { get }
  var imageUrl: Swift.String? { get }
  var skuId: Swift.String? { get }
  var warranty: VnshopSdk.ICartWarranty? { get }
  var slug: Swift.String? { get }
}
public protocol ICartBaseExclusion {
  var applyOn: [Swift.String] { get }
  var isDefault: [Swift.Bool] { get }
}
public protocol ICartBaseFlashSale {
  var id: Swift.Int32 { get }
  var usedCount: Swift.Int32 { get }
  var totalCount: Swift.Int32 { get }
  var startTimestampSec: Foundation.Date { get }
  var endTimestampSec: Foundation.Date { get }
  var discountPercent: Swift.Double { get }
  var sellerIdValue: Swift.Int32? { get }
}
public protocol ICartBaseProductPrice {
  var supplierRetailPriceValue: Swift.Double? { get }
  var sellPriceValue: Swift.Double? { get }
  var discountAmount: Swift.Double? { get }
  var terminalPrice: Swift.Double? { get }
  var discountPercent: Swift.Double? { get }
  var latestPrice: Swift.Double? { get }
}
public protocol ICartBaseDefinition {
  var id: Swift.Int32 { get }
  var name: Swift.String? { get }
  var applyOn: Swift.String? { get }
  var isDefault: Swift.Bool { get }
  var conditionValue: VnshopSdk.ICartBaseCondition { get }
  var benefitValue: VnshopSdk.ICartBaseBenefit? { get }
  var startedAt: Foundation.Date? { get }
  var endedAt: Foundation.Date? { get }
  var timeRangesValue: [VnshopSdk.ICartBaseTimeRange]? { get }
  var sellerIdValue: Swift.Int? { get }
  var description: Swift.String? { get }
  var partner: Swift.String? { get }
  var type: Swift.String? { get }
  var campaign: VnshopSdk.ICartCampaign? { get }
  var govRegister: Swift.Bool { get }
  var isPrivate: Swift.Bool { get }
}
public protocol ICartBaseProduct {
  var totalAvailable: Swift.Int? { get }
  var productInfoValue: VnshopSdk.ICartBaseProductInfo? { get }
  var pricesValue: [VnshopSdk.ICartBaseProductPrice] { get }
  var flashSalesValue: [VnshopSdk.ICartBaseFlashSale] { get }
  var promotionsValue: [VnshopSdk.ICartBaseDefinition] { get }
  var provider: VnshopSdk.ICartProvider? { get }
}
public protocol ICartBaseVoucher : VnshopSdk.ICartWithBudget {
  var name: Swift.String { get }
  var quantity: Swift.Int32 { get }
  var maxQuantity: Swift.Int32 { get }
}
public protocol ICartWithBudget {
  var budgetStatus: Swift.String? { get }
  var outOfBudgetValue: Swift.Bool? { get }
}
public protocol ICartBaseTimeRange {
  var start: Swift.String { get }
  var end: Swift.String { get }
}
public protocol ICartGift {
  var lineItemId: Swift.String { get }
  var sku: Swift.String { get }
  var name: Swift.String { get }
  var quantity: Swift.Int32 { get }
}
public protocol ICartOrderLineItem {
  var id: Swift.String { get }
  var product: VnshopSdk.ICartBaseProduct? { get }
  var expectedPromotion: VnshopSdk.ICartBaseDefinition? { get }
  var addedAt: Foundation.Date? { get }
  var bizType: Swift.String { get }
  var displayName: Swift.String? { get }
  var lineItemId: Swift.String { get }
  var name: Swift.String { get }
  var parentId: Swift.String? { get }
  var parentSku: Swift.String? { get }
  var price: Swift.Double { get }
  var quantity: Swift.Int32 { get }
  var reasonAdd: Swift.String { get }
  var reasonDiscount: Swift.String { get }
  var rowTotal: Swift.Double { get }
  var salePoint: Swift.Int32 { get }
  var sellerId: Swift.Int32 { get }
  var sku: Swift.String { get }
  var unitAdd: Swift.Double { get }
  var unitDiscount: Swift.Double { get }
  var unitPrice: Swift.Double { get }
  var unitPriceBeforeTax: Swift.Double { get }
  var vatRate: Swift.Double { get }
  var isGift: Swift.Bool { get }
  var isSelected: Swift.Bool { get }
  var warranty: Swift.Int32 { get }
  var loyaltyPoint: Swift.Int32 { get }
  var isShippingFeeItem: Swift.Bool { get }
  var extra: Swift.String? { get }
}
public protocol ICartData {
  var product: VnshopSdk.ICartBaseProduct { get }
  var selectablePromotionId: Swift.Int? { get }
  var couponPromotionId: Swift.Int? { get }
  var quantity: Swift.Int32 { get }
  var selected: Swift.Bool { get }
  var addedAt: Foundation.Date? { get }
  var extraData: Swift.String? { get }
}
public protocol ICartVoucher {
  var quantity: Swift.Int32 { get }
}
public protocol ICartPayment {
  var methodCode: Swift.String { get }
  var amount: Swift.Double { get }
  var point: Swift.Int? { get }
  var isLoyaltyPayment: Swift.Bool { get }
}
public protocol ICartServiceItemConfig {
  var sku: Swift.String { get }
  var name: Swift.String { get }
}
public protocol ICartOrderService {
  var sellerId: Swift.Int32 { get }
  var installation: Swift.Bool { get }
  var technicalSupport: Swift.Bool { get }
  var delivery: Swift.Bool { get }
}
public protocol ICartIdentityToken {
  var token: Swift.String? { get }
}
public protocol ICartApplyOn {
  var lineItemId: Swift.String { get }
  var quantity: Swift.Int32 { get }
  var sku: Swift.String { get }
}
public protocol ICartOrder {
  var grandTotal: Swift.Double { get }
  var subTotal: Swift.Double { get }
  var totalDiscount: Swift.Double { get }
  var preCalculatedPoints: Swift.Int? { get }
  var shippingFeeValue: Swift.Double { get }
  var items: [VnshopSdk.ICartOrderLineItem] { get }
  var invalidPromotions: [VnshopSdk.ICartOrderPromotion] { get }
  var promotions: [VnshopSdk.ICartOrderPromotion] { get }
  var orderCoupons: VnshopSdk.ICartOrderCoupons? { get }
  var issues: [Swift.String] { get }
  var shippingFee: Swift.Dictionary<Swift.Int, Swift.Double> { get }
  var customerType: Swift.String { get }
  var service: [VnshopSdk.ICartOrderService] { get }
  var terminalCode: Swift.String { get }
  var channelCode: Swift.String { get }
  var technicalSupportFee: Swift.Dictionary<Swift.Int, Swift.Double> { get }
  var payments: [VnshopSdk.ICartPayment] { get }
}
public protocol ICartOrderPromotion {
  var applyType: Swift.String { get }
  var baseFlashSale: VnshopSdk.ICartBaseFlashSale? { get }
  var basePromotion: VnshopSdk.ICartBaseDefinition? { get }
  var coupon: Swift.String? { get }
  var discount: Swift.Double { get }
  var id: Swift.Int32 { get }
  var promotionId: Swift.String { get }
  var quantity: Swift.Int32 { get }
  var sellerId: Swift.Int32 { get }
  var type: Swift.String { get }
  var voucher: VnshopSdk.ICartVoucher? { get }
  var isSelected: Swift.Bool { get }
  var applyOn: [VnshopSdk.ICartApplyOn] { get }
  var gifts: [VnshopSdk.ICartGift] { get }
}
public protocol ICartOrderCoupons {
  var applicableCoupons: [VnshopSdk.ICartBaseDefinition] { get }
  var inapplicableCoupons: [VnshopSdk.ICartBaseDefinition] { get }
}
public protocol ICartCheckout {
  var code: Swift.String { get }
  var grandTotal: Swift.Double { get }
  var createdAt: Foundation.Date? { get }
  var predictCancelAt: Foundation.Date? { get }
}
public protocol ICartProvider {
  var id: Swift.Int? { get }
  var name: Swift.String? { get }
  var slogan: Swift.String? { get }
  var logo: Swift.String? { get }
}
public protocol ICartBrand {
  var name: Swift.String? { get }
  var code: Swift.String? { get }
}
public protocol ICartCategory {
  var id: Swift.Int32 { get }
  var name: Swift.String? { get }
  var code: Swift.String? { get }
}
public protocol ICartTax {
  var taxOutCode: Swift.String { get }
  var taxOut: Swift.Double? { get }
}
public protocol ICartWarranty {
  var description: Swift.String? { get }
  var months: Swift.Int? { get }
}
public protocol ICartCampaign {
  var id: Swift.Int { get }
  var name: Swift.String? { get }
}
public protocol IBasePage {
  var number: Swift.Int? { get }
  var size: Swift.Int? { get }
  var totalPages: Swift.Int? { get }
  var numberOfElements: Swift.Int? { get }
  var totalElements: Swift.Int? { get }
  var first: Swift.Bool { get }
  var last: Swift.Bool { get }
}
@_inheritsConvenienceInitializers @objc final public class ThemeBarStylePicker : VnshopSdk.ThemePicker {
  public convenience init(keyPath: Swift.String)
  public convenience init(keyPath: Swift.String, map: @escaping (Any?) -> UIKit.UIBarStyle?)
  public convenience init(styles: UIKit.UIBarStyle...)
  required public convenience init(arrayLiteral elements: UIKit.UIBarStyle...)
  required public convenience init(stringLiteral value: Swift.String)
  required public convenience init(unicodeScalarLiteral value: Swift.String)
  required public convenience init(extendedGraphemeClusterLiteral value: Swift.String)
  @objc deinit
  required public init(v: @escaping VnshopSdk.ThemePicker.ValueType)
}
extension ThemeBarStylePicker {
  final public class func pickerWithKeyPath(_ keyPath: Swift.String, map: @escaping (Any?) -> UIKit.UIBarStyle?) -> VnshopSdk.ThemeBarStylePicker
  final public class func pickerWithStyles(_ styles: [UIKit.UIBarStyle]) -> VnshopSdk.ThemeBarStylePicker
}
@objc extension ThemeBarStylePicker {
  @objc final public class func pickerWithKeyPath(_ keyPath: Swift.String) -> VnshopSdk.ThemeBarStylePicker
  @objc final public class func pickerWithStringStyles(_ styles: [Swift.String]) -> VnshopSdk.ThemeBarStylePicker
}
extension ThemeBarStylePicker : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = UIKit.UIBarStyle
}
extension ThemeBarStylePicker : Swift.ExpressibleByStringLiteral {
  public typealias StringLiteralType = Swift.String
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
@objc public class ThemePicker : ObjectiveC.NSObject, Foundation.NSCopying {
  public typealias ValueType = () -> Any?
  public var value: VnshopSdk.ThemePicker.ValueType
  required public init(v: @escaping VnshopSdk.ThemePicker.ValueType)
  @objc public func copy(with zone: ObjectiveC.NSZone?) -> Any
  @objc override dynamic public init()
  @objc deinit
}
extension ThemeManager {
  final public class func getVSBundleImage(for keyPath: Swift.String) -> UIKit.UIImage?
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VnShopApplication : ObjectiveC.NSObject {
  public static var shared: VnshopSdk.VnShopApplication
  @objc deinit
}
public enum UIColorInputError : Swift.Error {
  case missingHashMarkAsPrefix
  case unableToScanHexValue
  case mismatchedHexStringLength
  public static func == (a: VnshopSdk.UIColorInputError, b: VnshopSdk.UIColorInputError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc extension UIColor {
  @objc dynamic public convenience init(hex3: Swift.UInt16, alpha: CoreGraphics.CGFloat = 1)
  @objc dynamic public convenience init(hex4: Swift.UInt16)
  @objc dynamic public convenience init(hex6: Swift.UInt32, alpha: CoreGraphics.CGFloat = 1)
  @objc dynamic public convenience init(hex8: Swift.UInt32)
  @objc dynamic public convenience init(rgba_throws rgba: Swift.String) throws
  @objc dynamic public convenience init(rgba: Swift.String, defaultColor: UIKit.UIColor = UIColor.clear)
  @objc dynamic public func hexString(_ includeAlpha: Swift.Bool) -> Swift.String
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc override dynamic open var debugDescription: Swift.String {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc final public class ThemeBlurEffectPicker : VnshopSdk.ThemePicker {
  public convenience init(keyPath: Swift.String, map: @escaping (Any?) -> UIKit.UIBlurEffect?)
  public convenience init(appearances: UIKit.UIBlurEffect...)
  required public convenience init(arrayLiteral elements: UIKit.UIBlurEffect...)
  @objc deinit
  required public init(v: @escaping VnshopSdk.ThemePicker.ValueType)
}
@objc extension ThemeBlurEffectPicker {
  @objc final public class func pickerWithKeyPath(_ keyPath: Swift.String, map: @escaping (Any?) -> UIKit.UIBlurEffect?) -> VnshopSdk.ThemeBlurEffectPicker
  @objc final public class func pickerWithAppearances(_ appearances: [UIKit.UIBlurEffect]) -> VnshopSdk.ThemeBlurEffectPicker
}
extension ThemeBlurEffectPicker : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = UIKit.UIBlurEffect
}
@_inheritsConvenienceInitializers @objc final public class ThemeDictionaryPicker : VnshopSdk.ThemePicker {
  public convenience init<T>(keyPath: Swift.String, map: @escaping (Any?) -> [T : Swift.AnyObject]?) where T : Swift.Hashable
  public convenience init<T>(dicts: [T : Swift.AnyObject]...) where T : Swift.Hashable
  required public convenience init(arrayLiteral elements: [Swift.String : Swift.AnyObject]...)
  @objc deinit
  required public init(v: @escaping VnshopSdk.ThemePicker.ValueType)
}
@objc extension ThemeDictionaryPicker {
  @objc final public class func pickerWithKeyPath(_ keyPath: Swift.String, map: @escaping (Any?) -> [Swift.String : Swift.AnyObject]?) -> VnshopSdk.ThemeDictionaryPicker
  @objc final public class func pickerWithDicts(_ dicts: [[Swift.String : Swift.AnyObject]]) -> VnshopSdk.ThemeDictionaryPicker
}
extension ThemeDictionaryPicker : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = [Swift.String : Swift.AnyObject]
}
public enum HorizontalAlignment {
  case left
  case right
  case leading
  case trailing
  case justified
  public static func == (a: VnshopSdk.HorizontalAlignment, b: VnshopSdk.HorizontalAlignment) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum VerticalAlignment {
  case top
  case center
  case bottom
  public static func == (a: VnshopSdk.VerticalAlignment, b: VnshopSdk.VerticalAlignment) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc open class AlignedCollectionViewFlowLayout : UIKit.UICollectionViewFlowLayout {
  public var margin: CoreGraphics.CGFloat
  public var horizontalAlignment: VnshopSdk.HorizontalAlignment
  public var verticalAlignment: VnshopSdk.VerticalAlignment
  public init(horizontalAlignment: VnshopSdk.HorizontalAlignment = .justified, verticalAlignment: VnshopSdk.VerticalAlignment = .center)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func layoutAttributesForItem(at indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewLayoutAttributes?
  @objc override dynamic open func layoutAttributesForElements(in rect: CoreGraphics.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]?
  @objc deinit
  @objc override dynamic public init()
}
public protocol ICartPaymentMethodMerchantMethodCode {
  var merchantMethodCode: Swift.String { get }
  var discountCodes: [Swift.String] { get }
}
extension UINavigationController {
  public var swipeBack: VnshopSdk.SwipeBackController? {
    get
    set(newValue)
  }
}
open class SwipeBackConfiguration {
  public static var shared: VnshopSdk.SwipeBackConfiguration
  public init()
  open var transitionDuration: Swift.Double
  open var parallaxFactor: CoreGraphics.CGFloat
  open var backViewDimness: CoreGraphics.CGFloat
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(swift 256)
@objcMembers public class __AssocKey : ObjectiveC.NSObject {
  @objc public static var swipeBack: Swift.UnsafeRawPointer {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class RadioGroup : UIKit.UIControl {
  public convenience init(titles: [Swift.String])
  open var titles: [Swift.String?] {
    get
    set(newValue)
  }
  open var attributedTitles: [Foundation.NSAttributedString?] {
    get
    set(newValue)
  }
  @objc @IBInspectable open var selectedIndex: Swift.Int {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable dynamic open var selectedColor: UIKit.UIColor {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable dynamic open var unSelectedColor: UIKit.UIColor {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable dynamic open var isVertical: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable dynamic open var buttonSize: CoreGraphics.CGFloat {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable dynamic open var spacing: CoreGraphics.CGFloat {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable dynamic open var itemSpacing: CoreGraphics.CGFloat {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable dynamic open var isButtonAfterTitle: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable dynamic open var titleColor: UIKit.UIColor? {
    @objc get
    @objc set(value)
  }
  @objc dynamic open var titleAlignment: UIKit.NSTextAlignment {
    @objc get
    @objc set(value)
  }
  @objc dynamic open var titleFont: UIKit.UIFont? {
    @objc get
    @objc set(value)
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
}
extension UIStackView {
  public func removeArrangedSubviewCompletely(_ subview: UIKit.UIView)
  public func removeAllArrangedSubviewsCompletely()
}
extension UIView {
  @discardableResult
  public func constrain(_ at: UIKit.NSLayoutConstraint.Attribute, to: CoreGraphics.CGFloat = 0, ratio: CoreGraphics.CGFloat = 1, relation: UIKit.NSLayoutConstraint.Relation = .equal, priority: UIKit.UILayoutPriority = .required, identifier: Swift.String? = nil) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func constrain(_ subview: UIKit.UIView, at: UIKit.NSLayoutConstraint.Attribute, diff: CoreGraphics.CGFloat = 0, ratio: CoreGraphics.CGFloat = 1, relation: UIKit.NSLayoutConstraint.Relation = .equal, priority: UIKit.UILayoutPriority = .required, identifier: Swift.String? = nil) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func constrain(_ subview: UIKit.UIView, at: UIKit.NSLayoutConstraint.Attribute, to subview2: UIKit.UIView, at at2: UIKit.NSLayoutConstraint.Attribute = .notAnAttribute, diff: CoreGraphics.CGFloat = 0, ratio: CoreGraphics.CGFloat = 1, relation: UIKit.NSLayoutConstraint.Relation = .equal, priority: UIKit.UILayoutPriority = .required, identifier: Swift.String? = nil) -> UIKit.NSLayoutConstraint
  @discardableResult
  public func addConstrainedSubview(_ subview: UIKit.UIView, constrain: UIKit.NSLayoutConstraint.Attribute...) -> [UIKit.NSLayoutConstraint]
  public func viewInHierarchy(frontFirst: Swift.Bool = true, where predicate: (UIKit.UIView) -> Swift.Bool) -> UIKit.UIView?
  public func viewWithClass<T>(_ aClass: T.Type, frontFirst: Swift.Bool = true) -> T?
}
public struct AnyDecodable : Swift.Decodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyDecodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension AnyDecodable : VnshopSdk._AnyDecodable {
}
extension _AnyDecodable {
  public init(from decoder: Swift.Decoder) throws
}
extension AnyDecodable : Swift.Equatable {
  public static func == (lhs: VnshopSdk.AnyDecodable, rhs: VnshopSdk.AnyDecodable) -> Swift.Bool
}
extension AnyDecodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension AnyDecodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc final public class ThemeKeyboardAppearancePicker : VnshopSdk.ThemePicker {
  public convenience init(keyPath: Swift.String)
  public convenience init(keyPath: Swift.String, map: @escaping (Any?) -> UIKit.UIKeyboardAppearance?)
  public convenience init(styles: UIKit.UIKeyboardAppearance...)
  required public convenience init(arrayLiteral elements: UIKit.UIKeyboardAppearance...)
  required public convenience init(stringLiteral value: Swift.String)
  required public convenience init(unicodeScalarLiteral value: Swift.String)
  required public convenience init(extendedGraphemeClusterLiteral value: Swift.String)
  @objc deinit
  required public init(v: @escaping VnshopSdk.ThemePicker.ValueType)
}
extension ThemeKeyboardAppearancePicker {
  final public class func pickerWithKeyPath(_ keyPath: Swift.String, map: @escaping (Any?) -> UIKit.UIKeyboardAppearance?) -> VnshopSdk.ThemeKeyboardAppearancePicker
  final public class func pickerWithStyles(_ styles: [UIKit.UIKeyboardAppearance]) -> VnshopSdk.ThemeKeyboardAppearancePicker
}
@objc extension ThemeKeyboardAppearancePicker {
  @objc final public class func pickerWithKeyPath(_ keyPath: Swift.String) -> VnshopSdk.ThemeKeyboardAppearancePicker
  @objc final public class func pickerWithStringStyles(_ styles: [Swift.String]) -> VnshopSdk.ThemeKeyboardAppearancePicker
}
extension ThemeKeyboardAppearancePicker : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = UIKit.UIKeyboardAppearance
}
extension ThemeKeyboardAppearancePicker : Swift.ExpressibleByStringLiteral {
  public typealias StringLiteralType = Swift.String
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
open class KeychainSwift {
  open var lastResultCode: Darwin.OSStatus
  open var accessGroup: Swift.String?
  open var synchronizable: Swift.Bool
  public init()
  public init(keyPrefix: Swift.String)
  @discardableResult
  open func set(_ value: Swift.String, forKey key: Swift.String, withAccess access: VnshopSdk.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Foundation.Data, forKey key: Swift.String, withAccess access: VnshopSdk.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  @discardableResult
  open func set(_ value: Swift.Bool, forKey key: Swift.String, withAccess access: VnshopSdk.KeychainSwiftAccessOptions? = nil) -> Swift.Bool
  open func get(_ key: Swift.String) -> Swift.String?
  open func getData(_ key: Swift.String, asReference: Swift.Bool = false) -> Foundation.Data?
  open func getBool(_ key: Swift.String) -> Swift.Bool?
  @discardableResult
  open func delete(_ key: Swift.String) -> Swift.Bool
  public var allKeys: [Swift.String] {
    get
  }
  @discardableResult
  open func clear() -> Swift.Bool
  @objc deinit
}
@objc extension ThemeManager {
  @objc final public class func setThemeWithPlistInMainBundle(_ plistName: Swift.String)
  @objc final public class func setThemeWithPlistInSandbox(_ plistName: Swift.String, path: Foundation.URL)
  @objc final public class func setThemeWithJsonInMainBundle(_ jsonName: Swift.String)
  @objc final public class func setThemeWithJsonInSandbox(_ jsonName: Swift.String, path: Foundation.URL)
  @objc final public class func setThemeWithDictInMainBundle(_ dict: Foundation.NSDictionary)
  @objc final public class func setThemeWithDictInSandbox(_ dict: Foundation.NSDictionary, path: Foundation.URL)
}
@objc extension ThemeManager {
  @objc final public class func value(for keyPath: Swift.String) -> Any?
  @objc final public class func string(for keyPath: Swift.String) -> Swift.String?
  @objc final public class func number(for keyPath: Swift.String) -> Foundation.NSNumber?
  @objc final public class func dictionary(for keyPath: Swift.String) -> Foundation.NSDictionary?
  @objc final public class func color(for keyPath: Swift.String) -> UIKit.UIColor?
  @objc final public class func image(for keyPath: Swift.String) -> UIKit.UIImage?
  @objc final public class func font(for keyPath: Swift.String) -> UIKit.UIFont?
}
public struct AnyCodable : Swift.Codable {
  public let value: Any
  public init<T>(_ value: T?)
}
extension AnyCodable : VnshopSdk._AnyEncodable, VnshopSdk._AnyDecodable {
}
extension AnyCodable : Swift.Equatable {
  public static func == (lhs: VnshopSdk.AnyCodable, rhs: VnshopSdk.AnyCodable) -> Swift.Bool
}
extension AnyCodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension AnyCodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension AnyCodable : Swift.ExpressibleByNilLiteral {
}
extension AnyCodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension AnyCodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension AnyCodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension AnyCodable : Swift.ExpressibleByStringLiteral {
  public typealias StringLiteralType = Swift.String
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension AnyCodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension AnyCodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
@_inheritsConvenienceInitializers @objc final public class ThemeScrollViewIndicatorStylePicker : VnshopSdk.ThemePicker {
  public convenience init(keyPath: Swift.String)
  public convenience init(keyPath: Swift.String, map: @escaping (Any?) -> UIKit.UIScrollView.IndicatorStyle?)
  public convenience init(styles: UIKit.UIScrollView.IndicatorStyle...)
  required public convenience init(arrayLiteral elements: UIKit.UIScrollView.IndicatorStyle...)
  required public convenience init(stringLiteral value: Swift.String)
  required public convenience init(unicodeScalarLiteral value: Swift.String)
  required public convenience init(extendedGraphemeClusterLiteral value: Swift.String)
  @objc deinit
  required public init(v: @escaping VnshopSdk.ThemePicker.ValueType)
}
extension ThemeScrollViewIndicatorStylePicker {
  final public class func pickerWithKeyPath(_ keyPath: Swift.String, map: @escaping (Any?) -> UIKit.UIScrollView.IndicatorStyle?) -> VnshopSdk.ThemeScrollViewIndicatorStylePicker
  final public class func pickerWithStyles(_ styles: [UIKit.UIScrollView.IndicatorStyle]) -> VnshopSdk.ThemeScrollViewIndicatorStylePicker
}
@objc extension ThemeScrollViewIndicatorStylePicker {
  @objc final public class func pickerWithKeyPath(_ keyPath: Swift.String) -> VnshopSdk.ThemeScrollViewIndicatorStylePicker
  @objc final public class func pickerWithStringStyles(_ styles: [Swift.String]) -> VnshopSdk.ThemeScrollViewIndicatorStylePicker
}
extension ThemeScrollViewIndicatorStylePicker : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = UIKit.UIScrollView.IndicatorStyle
}
extension ThemeScrollViewIndicatorStylePicker : Swift.ExpressibleByStringLiteral {
  public typealias StringLiteralType = Swift.String
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
@objc @_inheritsConvenienceInitializers @available(tvOS, unavailable)
public class KeyboardLayoutConstraint : UIKit.NSLayoutConstraint {
  @available(tvOS, unavailable)
  @objc override dynamic public func awakeFromNib()
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class RadioButton : UIKit.UIView {
  @objc @IBInspectable open var isSelected: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable dynamic open var ringSpacing: CoreGraphics.CGFloat {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable dynamic open var selectedColor: UIKit.UIColor
  @objc @IBInspectable dynamic open var unSelectedColor: UIKit.UIColor
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc final public class ThemeActivityIndicatorViewStylePicker : VnshopSdk.ThemePicker {
  public convenience init(keyPath: Swift.String)
  public convenience init(keyPath: Swift.String, map: @escaping (Any?) -> UIKit.UIActivityIndicatorView.Style?)
  public convenience init(styles: UIKit.UIActivityIndicatorView.Style...)
  required public convenience init(arrayLiteral elements: UIKit.UIActivityIndicatorView.Style...)
  required public convenience init(stringLiteral value: Swift.String)
  required public convenience init(unicodeScalarLiteral value: Swift.String)
  required public convenience init(extendedGraphemeClusterLiteral value: Swift.String)
  @objc deinit
  required public init(v: @escaping VnshopSdk.ThemePicker.ValueType)
}
extension ThemeActivityIndicatorViewStylePicker {
  final public class func pickerWithKeyPath(_ keyPath: Swift.String, map: @escaping (Any?) -> UIKit.UIActivityIndicatorView.Style?) -> VnshopSdk.ThemeActivityIndicatorViewStylePicker
  final public class func pickerWithStyles(_ styles: [UIKit.UIActivityIndicatorView.Style]) -> VnshopSdk.ThemeActivityIndicatorViewStylePicker
}
@objc extension ThemeActivityIndicatorViewStylePicker {
  @objc final public class func pickerWithKeyPath(_ keyPath: Swift.String) -> VnshopSdk.ThemeActivityIndicatorViewStylePicker
  @objc final public class func pickerWithStringStyles(_ styles: [Swift.String]) -> VnshopSdk.ThemeActivityIndicatorViewStylePicker
}
extension ThemeActivityIndicatorViewStylePicker : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = UIKit.UIActivityIndicatorView.Style
}
extension ThemeActivityIndicatorViewStylePicker : Swift.ExpressibleByStringLiteral {
  public typealias StringLiteralType = Swift.String
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
@_inheritsConvenienceInitializers @available(iOS 13.0, tvOS 13.0, *)
@objc final public class ThemeNavigationBarAppearancePicker : VnshopSdk.ThemePicker {
  public convenience init(keyPath: Swift.String, map: @escaping (Any?) -> UIKit.UINavigationBarAppearance?)
  public convenience init(appearances: UIKit.UINavigationBarAppearance...)
  required public convenience init(arrayLiteral elements: UIKit.UINavigationBarAppearance...)
  @objc deinit
  required public init(v: @escaping VnshopSdk.ThemePicker.ValueType)
}
@available(iOS 13.0, tvOS 13.0, *)
@objc extension ThemeNavigationBarAppearancePicker {
  @objc final public class func pickerWithKeyPath(_ keyPath: Swift.String, map: @escaping (Any?) -> UIKit.UINavigationBarAppearance?) -> VnshopSdk.ThemeNavigationBarAppearancePicker
  @objc final public class func pickerWithAppearances(_ appearances: [UIKit.UINavigationBarAppearance]) -> VnshopSdk.ThemeNavigationBarAppearancePicker
}
@available(iOS 13.0, tvOS 13.0, *)
extension ThemeNavigationBarAppearancePicker : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = UIKit.UINavigationBarAppearance
}
@_inheritsConvenienceInitializers @objc final public class ThemeCGColorPicker : VnshopSdk.ThemePicker {
  public convenience init(keyPath: Swift.String)
  public convenience init(keyPath: Swift.String, map: @escaping (Any?) -> CoreGraphics.CGColor?)
  public convenience init(colors: Swift.String...)
  public convenience init(colors: UIKit.UIColor...)
  public convenience init(colors: CoreGraphics.CGColor...)
  required public convenience init(arrayLiteral elements: Swift.String...)
  required public convenience init(stringLiteral value: Swift.String)
  required public convenience init(unicodeScalarLiteral value: Swift.String)
  required public convenience init(extendedGraphemeClusterLiteral value: Swift.String)
  @objc deinit
  required public init(v: @escaping VnshopSdk.ThemePicker.ValueType)
}
@objc extension ThemeCGColorPicker {
  @objc final public class func pickerWithKeyPath(_ keyPath: Swift.String) -> VnshopSdk.ThemeCGColorPicker
  @objc final public class func pickerWithKeyPath(_ keyPath: Swift.String, map: @escaping (Any?) -> CoreGraphics.CGColor?) -> VnshopSdk.ThemeCGColorPicker
  @objc final public class func pickerWithColors(_ colors: [Swift.String]) -> VnshopSdk.ThemeCGColorPicker
  @objc final public class func pickerWithUIColors(_ colors: [UIKit.UIColor]) -> VnshopSdk.ThemeCGColorPicker
}
extension ThemeCGColorPicker : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Swift.String
}
extension ThemeCGColorPicker : Swift.ExpressibleByStringLiteral {
  public typealias StringLiteralType = Swift.String
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
@_inheritsConvenienceInitializers @objc final public class ThemeFontPicker : VnshopSdk.ThemePicker {
  public convenience init(keyPath: Swift.String, map: @escaping (Any?) -> UIKit.UIFont?)
  public convenience init(fonts: UIKit.UIFont...)
  required public convenience init(stringLiteral value: Swift.String)
  required public convenience init(arrayLiteral elements: UIKit.UIFont...)
  @objc deinit
  required public init(v: @escaping VnshopSdk.ThemePicker.ValueType)
}
@objc extension ThemeFontPicker {
  @objc final public class func pickerWithKeyPath(_ keyPath: Swift.String, map: @escaping (Any?) -> UIKit.UIFont?) -> VnshopSdk.ThemeFontPicker
  @objc final public class func pickerWithFonts(_ fonts: [UIKit.UIFont]) -> VnshopSdk.ThemeFontPicker
}
extension ThemeFontPicker : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = UIKit.UIFont
}
extension ThemeFontPicker : Swift.ExpressibleByStringLiteral {
  public typealias StringLiteralType = Swift.String
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
public enum ProductSortCriteria : Swift.Int, Swift.CaseIterable {
  case `default`
  case popular
  case bestPromotion
  case priceLowToHigh
  case priceHighToLow
  case newest
  case last3Day
  case popularOneMonth
  case turnoverRate
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [VnshopSdk.ProductSortCriteria]
  public static var allCases: [VnshopSdk.ProductSortCriteria] {
    get
  }
}
public var ThemeUpdateNotification: Swift.String
public enum ThemePath {
  case mainBundle
  case appBundle
  case sandbox(Foundation.URL)
  public var URL: Foundation.URL? {
    get
  }
  public func plistPath(name: Swift.String) -> Swift.String?
  public func jsonPath(name: Swift.String) -> Swift.String?
}
@_inheritsConvenienceInitializers @objc final public class ThemeManager : ObjectiveC.NSObject {
  @objc public static var animationDuration: Swift.Double
  @objc public static var currentTheme: Foundation.NSDictionary? {
    get
  }
  @objc public static var currentThemeIndex: Swift.Int {
    get
  }
  public static var currentThemePath: VnshopSdk.ThemePath? {
    get
  }
  @objc deinit
  @objc override dynamic public init()
}
extension ThemeManager {
  @objc final public class func setTheme(index: Swift.Int)
  final public class func setTheme(plistName: Swift.String, path: VnshopSdk.ThemePath)
  final public class func setTheme(jsonName: Swift.String, path: VnshopSdk.ThemePath)
  final public class func setTheme(dict: Foundation.NSDictionary, path: VnshopSdk.ThemePath)
}
extension URL {
  public var queryParameters: [Swift.String : Swift.String]? {
    get
  }
}
@_inheritsConvenienceInitializers @objc final public class ThemeCGFloatPicker : VnshopSdk.ThemePicker {
  public convenience init(keyPath: Swift.String)
  public convenience init(keyPath: Swift.String, map: @escaping (Any?) -> CoreGraphics.CGFloat?)
  public convenience init(floats: CoreGraphics.CGFloat...)
  required public convenience init(arrayLiteral elements: CoreGraphics.CGFloat...)
  required public convenience init(stringLiteral value: Swift.String)
  required public convenience init(unicodeScalarLiteral value: Swift.String)
  required public convenience init(extendedGraphemeClusterLiteral value: Swift.String)
  @objc deinit
  required public init(v: @escaping VnshopSdk.ThemePicker.ValueType)
}
extension ThemeCGFloatPicker {
  final public class func pickerWithKeyPath(_ keyPath: Swift.String, map: @escaping (Any?) -> CoreGraphics.CGFloat?) -> VnshopSdk.ThemeCGFloatPicker
}
@objc extension ThemeCGFloatPicker {
  @objc final public class func pickerWithKeyPath(_ keyPath: Swift.String) -> VnshopSdk.ThemeCGFloatPicker
  @objc final public class func pickerWithFloats(_ floats: [CoreGraphics.CGFloat]) -> VnshopSdk.ThemeCGFloatPicker
}
extension ThemeCGFloatPicker : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = CoreGraphics.CGFloat
}
extension ThemeCGFloatPicker : Swift.ExpressibleByStringLiteral {
  public typealias StringLiteralType = Swift.String
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
public enum ArrowDirection : Swift.String {
  case up
  case down
  case left
  case right
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension UIFont {
  public static func loadAllAppFonts()
  public static func registerFontWithFilename(filename: Swift.String, bundle: Foundation.Bundle)
}
@objc open class CustomImageView : UIKit.UIImageView {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic public init(image: UIKit.UIImage?)
  @available(iOS 3.0, *)
  @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class CustomView : UIKit.UIView {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func awakeFromNib()
  @objc deinit
}
public var defaultCategoryId: Swift.Int
public struct KeychainSwiftConstants {
  public static var accessGroup: Swift.String {
    get
  }
  public static var accessible: Swift.String {
    get
  }
  public static var attrAccount: Swift.String {
    get
  }
  public static var attrSynchronizable: Swift.String {
    get
  }
  public static var klass: Swift.String {
    get
  }
  public static var matchLimit: Swift.String {
    get
  }
  public static var returnData: Swift.String {
    get
  }
  public static var valueData: Swift.String {
    get
  }
  public static var returnReference: Swift.String {
    get
  }
  public static var returnAttributes: Swift.String {
    get
  }
  public static var secMatchLimitAll: Swift.String {
    get
  }
}
public struct AnyEncodable : Swift.Encodable {
  public let value: Any
  public init<T>(_ value: T?)
}
@usableFromInline
internal protocol _AnyEncodable {
  var value: Any { get }
  init<T>(_ value: T?)
}
extension AnyEncodable : VnshopSdk._AnyEncodable {
}
extension _AnyEncodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension AnyEncodable : Swift.Equatable {
  public static func == (lhs: VnshopSdk.AnyEncodable, rhs: VnshopSdk.AnyEncodable) -> Swift.Bool
}
extension AnyEncodable : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension AnyEncodable : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension AnyEncodable : Swift.ExpressibleByNilLiteral {
}
extension AnyEncodable : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
}
extension AnyEncodable : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int
}
extension AnyEncodable : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
}
extension AnyEncodable : Swift.ExpressibleByStringLiteral {
  public typealias StringLiteralType = Swift.String
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension AnyEncodable : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Any
}
extension AnyEncodable : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.AnyHashable
  public typealias Value = Any
}
extension _AnyEncodable {
  public init(nilLiteral _: ())
  public init(booleanLiteral value: Swift.Bool)
  public init(integerLiteral value: Swift.Int)
  public init(floatLiteral value: Swift.Double)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public init(arrayLiteral elements: Any...)
  public init(dictionaryLiteral elements: (Swift.AnyHashable, Any)...)
}
public enum ContactRelation : Swift.String {
  case shipping
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
@_inheritsConvenienceInitializers @objc final public class ThemeImagePicker : VnshopSdk.ThemePicker {
  public convenience init(keyPath: Swift.String)
  public convenience init(keyPath: Swift.String, map: @escaping (Any?) -> UIKit.UIImage?)
  public convenience init(names: Swift.String...)
  public convenience init(images: UIKit.UIImage...)
  required public convenience init(arrayLiteral elements: Swift.String...)
  required public convenience init(stringLiteral value: Swift.String)
  required public convenience init(unicodeScalarLiteral value: Swift.String)
  required public convenience init(extendedGraphemeClusterLiteral value: Swift.String)
  @objc deinit
  required public init(v: @escaping VnshopSdk.ThemePicker.ValueType)
}
@objc extension ThemeImagePicker {
  @objc final public class func pickerWithKeyPath(_ keyPath: Swift.String) -> VnshopSdk.ThemeImagePicker
  @objc final public class func pickerWithKeyPath(_ keyPath: Swift.String, map: @escaping (Any?) -> UIKit.UIImage?) -> VnshopSdk.ThemeImagePicker
  @objc final public class func pickerWithNames(_ names: [Swift.String]) -> VnshopSdk.ThemeImagePicker
  @objc final public class func pickerWithImages(_ images: [UIKit.UIImage]) -> VnshopSdk.ThemeImagePicker
}
extension ThemeImagePicker : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Swift.String
}
extension ThemeImagePicker : Swift.ExpressibleByStringLiteral {
  public typealias StringLiteralType = Swift.String
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
@_inheritsConvenienceInitializers @objc final public class ThemeColorPicker : VnshopSdk.ThemePicker {
  public convenience init(keyPath: Swift.String)
  public convenience init(keyPath: Swift.String, map: @escaping (Any?) -> UIKit.UIColor?)
  public convenience init(colors: Swift.String...)
  public convenience init(colors: UIKit.UIColor...)
  required public convenience init(arrayLiteral elements: Swift.String...)
  required public convenience init(stringLiteral value: Swift.String)
  required public convenience init(unicodeScalarLiteral value: Swift.String)
  required public convenience init(extendedGraphemeClusterLiteral value: Swift.String)
  @objc deinit
  required public init(v: @escaping VnshopSdk.ThemePicker.ValueType)
}
@objc extension ThemeColorPicker {
  @objc final public class func pickerWithKeyPath(_ keyPath: Swift.String) -> VnshopSdk.ThemeColorPicker
  @objc final public class func pickerWithKeyPath(_ keyPath: Swift.String, map: @escaping (Any?) -> UIKit.UIColor?) -> VnshopSdk.ThemeColorPicker
  @objc final public class func pickerWithColors(_ colors: [Swift.String]) -> VnshopSdk.ThemeColorPicker
  @objc final public class func pickerWithUIColors(_ colors: [UIKit.UIColor]) -> VnshopSdk.ThemeColorPicker
}
extension ThemeColorPicker : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Swift.String
}
extension ThemeColorPicker : Swift.ExpressibleByStringLiteral {
  public typealias StringLiteralType = Swift.String
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
public enum KeychainSwiftAccessOptions {
  case accessibleWhenUnlocked
  case accessibleWhenUnlockedThisDeviceOnly
  case accessibleAfterFirstUnlock
  case accessibleAfterFirstUnlockThisDeviceOnly
  case accessibleWhenPasscodeSetThisDeviceOnly
  public static func == (a: VnshopSdk.KeychainSwiftAccessOptions, b: VnshopSdk.KeychainSwiftAccessOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum BudgetStatus : Swift.String {
  case active
  case inactive
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public protocol IStorage {
  var id: Swift.Int? { get }
  var originalName: Swift.String? { get }
  var replacementName: Swift.String? { get }
  var contentType: Swift.String? { get }
  var extensionType: Swift.String? { get }
  var url: Swift.String? { get }
}
extension NSDictionary {
  public func _bridgeToSwift() -> [ObjectiveC.NSObject : Swift.AnyObject]
}
extension UIView {
  public enum ShakeDirection {
    case horizontal
    case vertical
    public static func == (a: UIKit.UIView.ShakeDirection, b: UIKit.UIView.ShakeDirection) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public enum AngleUnit {
    case degrees
    case radians
    public static func == (a: UIKit.UIView.AngleUnit, b: UIKit.UIView.AngleUnit) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public enum ShakeAnimationType {
    case linear
    case easeIn
    case easeOut
    case easeInOut
    public static func == (a: UIKit.UIView.ShakeAnimationType, b: UIKit.UIView.ShakeAnimationType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
}
extension UIView {
  @objc @IBInspectable dynamic public var borderColor: UIKit.UIColor? {
    @objc get
    @objc set(newValue)
  }
  @objc @IBInspectable dynamic public var borderWidth: CoreGraphics.CGFloat {
    @objc get
    @objc set(newValue)
  }
  @objc @IBInspectable dynamic public var cornerRadius: CoreGraphics.CGFloat {
    @objc get
    @objc set(newValue)
  }
  public var height: CoreGraphics.CGFloat {
    get
    set(newValue)
  }
  public var isRightToLeft: Swift.Bool {
    get
  }
  public var screenshot: UIKit.UIImage? {
    get
  }
  @objc @IBInspectable dynamic public var shadowColor: UIKit.UIColor? {
    @objc get
    @objc set(newValue)
  }
  @objc @IBInspectable dynamic public var shadowOffset: CoreGraphics.CGSize {
    @objc get
    @objc set(newValue)
  }
  @objc @IBInspectable dynamic public var shadowOpacity: Swift.Float {
    @objc get
    @objc set(newValue)
  }
  @objc @IBInspectable dynamic public var shadowRadius: CoreGraphics.CGFloat {
    @objc get
    @objc set(newValue)
  }
  public var size: CoreGraphics.CGSize {
    get
    set(newValue)
  }
  public var parentViewController: UIKit.UIViewController? {
    get
  }
  public var width: CoreGraphics.CGFloat {
    get
    set(newValue)
  }
  public var x: CoreGraphics.CGFloat {
    get
    set(newValue)
  }
  public var y: CoreGraphics.CGFloat {
    get
    set(newValue)
  }
}
extension UIView {
  public func firstResponder() -> UIKit.UIView?
  public func roundCorners(_ corners: UIKit.UIRectCorner, radius: CoreGraphics.CGFloat)
  public func addShadow(ofColor color: UIKit.UIColor = UIColor(red: 0.07, green: 0.47, blue: 0.57, alpha: 1.0), radius: CoreGraphics.CGFloat = 3, offset: CoreGraphics.CGSize = .zero, opacity: Swift.Float = 0.5)
  public func addSubviews(_ subviews: [UIKit.UIView])
  public func fadeIn(duration: Foundation.TimeInterval = 1, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func fadeOut(duration: Foundation.TimeInterval = 1, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public class func loadFromNib(named name: Swift.String, bundle: Foundation.Bundle? = nil) -> UIKit.UIView?
  public func removeSubviews()
  public func removeGestureRecognizers()
  public func addGestureRecognizers(_ gestureRecognizers: [UIKit.UIGestureRecognizer])
  public func removeGestureRecognizers(_ gestureRecognizers: [UIKit.UIGestureRecognizer])
  public func rotate(byAngle angle: CoreGraphics.CGFloat, ofType type: UIKit.UIView.AngleUnit, animated: Swift.Bool = false, duration: Foundation.TimeInterval = 1, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func rotate(toAngle angle: CoreGraphics.CGFloat, ofType type: UIKit.UIView.AngleUnit, animated: Swift.Bool = false, duration: Foundation.TimeInterval = 1, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func scale(by offset: CoreGraphics.CGPoint, animated: Swift.Bool = false, duration: Foundation.TimeInterval = 1, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public func shake(direction: UIKit.UIView.ShakeDirection = .horizontal, duration: Foundation.TimeInterval = 1, animationType: UIKit.UIView.ShakeAnimationType = .easeOut, completion: (() -> Swift.Void)? = nil)
  @available(iOS 9, *)
  public func addConstraints(withFormat: Swift.String, views: UIKit.UIView...)
  @available(iOS 9, *)
  public func fillToSuperview()
  @available(iOS 9, *)
  @discardableResult
  public func anchor(top: UIKit.NSLayoutYAxisAnchor? = nil, left: UIKit.NSLayoutXAxisAnchor? = nil, bottom: UIKit.NSLayoutYAxisAnchor? = nil, right: UIKit.NSLayoutXAxisAnchor? = nil, topConstant: CoreGraphics.CGFloat = 0, leftConstant: CoreGraphics.CGFloat = 0, bottomConstant: CoreGraphics.CGFloat = 0, rightConstant: CoreGraphics.CGFloat = 0, widthConstant: CoreGraphics.CGFloat = 0, heightConstant: CoreGraphics.CGFloat = 0) -> [UIKit.NSLayoutConstraint]
  @available(iOS 9, *)
  public func anchorCenterXToSuperview(constant: CoreGraphics.CGFloat = 0)
  @available(iOS 9, *)
  public func anchorCenterYToSuperview(constant: CoreGraphics.CGFloat = 0)
  @available(iOS 9, *)
  public func anchorCenterSuperview()
  public func ancestorView(where predicate: (UIKit.UIView?) -> Swift.Bool) -> UIKit.UIView?
  public func ancestorView<T>(withClass name: T.Type) -> T? where T : UIKit.UIView
}
extension NSMutableAttributedString {
  public func setAsLink(textToFind: Swift.String, linkURL: Swift.String) -> Swift.Bool
}
extension FileManager {
  open func secureCopyItem(at srcURL: Foundation.URL, to dstURL: Foundation.URL) -> Swift.Bool
}
extension Collection {
  public func json() -> Swift.String
}
extension UIImage {
  public convenience init?(color: UIKit.UIColor, size: CoreGraphics.CGSize = CGSize(width: 1, height: 1))
}
@objc extension UIView {
  @objc dynamic public var theme_alpha: VnshopSdk.ThemeCGFloatPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_backgroundColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_tintColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
}
@objc extension UIApplication {
  @objc dynamic public func theme_setStatusBarStyle(_ picker: VnshopSdk.ThemeStatusBarStylePicker, animated: Swift.Bool)
}
@objc extension UIBarItem {
  @objc dynamic public var theme_image: VnshopSdk.ThemeImagePicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public func theme_setTitleTextAttributes(_ picker: VnshopSdk.ThemeStringAttributesPicker?, forState state: UIKit.UIControl.State)
}
@objc extension UIBarButtonItem {
  @objc dynamic public var theme_tintColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
}
@objc extension UILabel {
  @objc dynamic public var theme_font: VnshopSdk.ThemeFontPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_textColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_highlightedTextColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_shadowColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_textAttributes: VnshopSdk.ThemeStringAttributesPicker? {
    @objc get
    @objc set(newValue)
  }
}
@objc extension UINavigationBar {
  @objc dynamic public var theme_barStyle: VnshopSdk.ThemeBarStylePicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_barTintColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_titleTextAttributes: VnshopSdk.ThemeStringAttributesPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_largeTitleTextAttributes: VnshopSdk.ThemeStringAttributesPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc @available(iOS 13.0, tvOS 13.0, *)
  dynamic public var theme_standardAppearance: VnshopSdk.ThemeNavigationBarAppearancePicker? {
    @objc get
    @objc set(newValue)
  }
  @objc @available(iOS 13.0, tvOS 13.0, *)
  dynamic public var theme_compactAppearance: VnshopSdk.ThemeNavigationBarAppearancePicker? {
    @objc get
    @objc set(newValue)
  }
  @objc @available(iOS 13.0, tvOS 13.0, *)
  dynamic public var theme_scrollEdgeAppearance: VnshopSdk.ThemeNavigationBarAppearancePicker? {
    @objc get
    @objc set(newValue)
  }
}
@objc extension UITabBar {
  @objc dynamic public var theme_barStyle: VnshopSdk.ThemeBarStylePicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_unselectedItemTintColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_barTintColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
}
@objc extension UITabBarItem {
  @objc dynamic public var theme_selectedImage: VnshopSdk.ThemeImagePicker? {
    @objc get
    @objc set(newValue)
  }
}
@objc extension UITableView {
  @objc dynamic public var theme_separatorColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_sectionIndexColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_sectionIndexBackgroundColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
}
@objc extension UITextField {
  @objc dynamic public var theme_font: VnshopSdk.ThemeFontPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_keyboardAppearance: VnshopSdk.ThemeKeyboardAppearancePicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_textColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_placeholderAttributes: VnshopSdk.ThemeStringAttributesPicker? {
    @objc get
    @objc set(newValue)
  }
}
@objc extension UITextView {
  @objc dynamic public var theme_font: VnshopSdk.ThemeFontPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_keyboardAppearance: VnshopSdk.ThemeKeyboardAppearancePicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_textColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
}
@objc extension UISearchBar {
  @objc dynamic public var theme_barStyle: VnshopSdk.ThemeBarStylePicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_keyboardAppearance: VnshopSdk.ThemeKeyboardAppearancePicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_barTintColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
}
@objc extension UIProgressView {
  @objc dynamic public var theme_progressTintColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_trackTintColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
}
@objc extension UIPageControl {
  @objc dynamic public var theme_pageIndicatorTintColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_currentPageIndicatorTintColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
}
@objc extension UIImageView {
  @objc dynamic public var theme_image: VnshopSdk.ThemeImagePicker? {
    @objc get
    @objc set(newValue)
  }
}
@objc extension UIActivityIndicatorView {
  @objc dynamic public var theme_color: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_activityIndicatorViewStyle: VnshopSdk.ThemeActivityIndicatorViewStylePicker? {
    @objc get
    @objc set(newValue)
  }
}
@objc extension UIScrollView {
  @objc dynamic public var theme_indicatorStyle: VnshopSdk.ThemeScrollViewIndicatorStylePicker? {
    @objc get
    @objc set(newValue)
  }
}
@objc extension UIButton {
  @objc dynamic public func theme_setImage(_ picker: VnshopSdk.ThemeImagePicker?, forState state: UIKit.UIControl.State)
  @objc dynamic public func theme_setBackgroundImage(_ picker: VnshopSdk.ThemeImagePicker?, forState state: UIKit.UIControl.State)
  @objc dynamic public func theme_setTitleColor(_ picker: VnshopSdk.ThemeColorPicker?, forState state: UIKit.UIControl.State)
}
@objc extension CALayer {
  @objc dynamic public var theme_backgroundColor: VnshopSdk.ThemeCGColorPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_borderWidth: VnshopSdk.ThemeCGFloatPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_borderColor: VnshopSdk.ThemeCGColorPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_shadowColor: VnshopSdk.ThemeCGColorPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_strokeColor: VnshopSdk.ThemeCGColorPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_fillColor: VnshopSdk.ThemeCGColorPicker? {
    @objc get
    @objc set(newValue)
  }
}
@objc extension UIToolbar {
  @objc dynamic public var theme_barStyle: VnshopSdk.ThemeBarStylePicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_barTintColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
}
@objc extension UISegmentedControl {
  @objc dynamic public var theme_selectedSegmentTintColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public func theme_setTitleTextAttributes(_ picker: VnshopSdk.ThemeStringAttributesPicker?, forState state: UIKit.UIControl.State)
}
@objc extension UISwitch {
  @objc dynamic public var theme_onTintColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_thumbTintColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
}
@objc extension UISlider {
  @objc dynamic public var theme_thumbTintColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_minimumTrackTintColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_maximumTrackTintColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
}
@objc extension UIPopoverPresentationController {
  @objc dynamic public var theme_backgroundColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
}
@objc extension UIRefreshControl {
  @objc dynamic public var theme_titleAttributes: VnshopSdk.ThemeStringAttributesPicker? {
    @objc get
    @objc set(newValue)
  }
}
@objc extension UIVisualEffectView {
  @objc dynamic public var theme_effect: VnshopSdk.ThemeVisualEffectPicker? {
    @objc get
    @objc set(newValue)
  }
}
@available(iOS 13.0, *)
extension UINavigationBarAppearance {
  public var theme_titleTextAttributes: VnshopSdk.ThemeStringAttributesPicker? {
    get
    set(newValue)
  }
  public var theme_largeTitleTextAttributes: VnshopSdk.ThemeStringAttributesPicker? {
    get
    set(newValue)
  }
  public var theme_backIndicatorImage: VnshopSdk.ThemeImagePicker? {
    get
    set(newValue)
  }
}
@available(iOS 13.0, *)
@objc extension UIBarAppearance {
  @objc dynamic public var theme_backgroundColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_backgroundImage: VnshopSdk.ThemeImagePicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_backgroundEffect: VnshopSdk.ThemeBlurEffectPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_shadowColor: VnshopSdk.ThemeColorPicker? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var theme_shadowImage: VnshopSdk.ThemeImagePicker? {
    @objc get
    @objc set(newValue)
  }
}
@_hasMissingDesignatedInitializers public class Reach {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ESRefreshHeaderAnimator : UIKit.UIView, VnshopSdk.ESRefreshProtocol, VnshopSdk.ESRefreshAnimatorProtocol, VnshopSdk.ESRefreshImpactProtocol {
  open var pullToRefreshDescription: Swift.String {
    get
    set(value)
  }
  open var releaseToRefreshDescription: Swift.String
  open var loadingDescription: Swift.String
  open var view: UIKit.UIView {
    get
  }
  open var insets: UIKit.UIEdgeInsets
  open var trigger: CoreGraphics.CGFloat
  open var executeIncremental: CoreGraphics.CGFloat
  open var state: VnshopSdk.ESRefreshViewState
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  open func refreshAnimationBegin(view: VnshopSdk.ESRefreshComponent)
  open func refreshAnimationEnd(view: VnshopSdk.ESRefreshComponent)
  open func refresh(view: VnshopSdk.ESRefreshComponent, progressDidChange progress: CoreGraphics.CGFloat)
  open func refresh(view: VnshopSdk.ESRefreshComponent, stateDidChange state: VnshopSdk.ESRefreshViewState)
  @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ESRefreshFooterAnimator : UIKit.UIView, VnshopSdk.ESRefreshProtocol, VnshopSdk.ESRefreshAnimatorProtocol {
  open var loadingMoreDescription: Swift.String
  open var noMoreDataDescription: Swift.String
  open var loadingDescription: Swift.String
  open var view: UIKit.UIView {
    get
  }
  open var duration: Swift.Double
  open var insets: UIKit.UIEdgeInsets
  open var trigger: CoreGraphics.CGFloat
  open var executeIncremental: CoreGraphics.CGFloat
  open var state: VnshopSdk.ESRefreshViewState
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  open func refreshAnimationBegin(view: VnshopSdk.ESRefreshComponent)
  open func refreshAnimationEnd(view: VnshopSdk.ESRefreshComponent)
  open func refresh(view: VnshopSdk.ESRefreshComponent, progressDidChange progress: CoreGraphics.CGFloat)
  open func refresh(view: VnshopSdk.ESRefreshComponent, stateDidChange state: VnshopSdk.ESRefreshViewState)
  @objc override dynamic open func layoutSubviews()
  @objc deinit
}
public protocol ESExtensionsProvider : AnyObject {
  associatedtype CompatibleType
  var es: Self.CompatibleType { get }
}
extension ESExtensionsProvider {
  public var es: VnshopSdk.ES<Self> {
    get
  }
}
public struct ES<Base> {
  public let base: Base
}
extension UIScrollView : VnshopSdk.ESExtensionsProvider {
  public typealias CompatibleType = VnshopSdk.ES<UIKit.UIScrollView>
}
extension UIScrollView {
  public var header: VnshopSdk.ESRefreshHeaderView? {
    get
    set(newValue)
  }
  public var footer: VnshopSdk.ESRefreshFooterView? {
    get
    set(newValue)
  }
}
extension ES where Base : UIKit.UIScrollView {
  @discardableResult
  public func addPullToRefresh(handler: @escaping VnshopSdk.ESRefreshHandler) -> VnshopSdk.ESRefreshHeaderView
  @discardableResult
  public func addPullToRefresh(animator: VnshopSdk.ESRefreshAnimatorProtocol & VnshopSdk.ESRefreshProtocol, handler: @escaping VnshopSdk.ESRefreshHandler) -> VnshopSdk.ESRefreshHeaderView
  @discardableResult
  public func addInfiniteScrolling(handler: @escaping VnshopSdk.ESRefreshHandler) -> VnshopSdk.ESRefreshFooterView
  @discardableResult
  public func addInfiniteScrolling(animator: VnshopSdk.ESRefreshAnimatorProtocol & VnshopSdk.ESRefreshProtocol, handler: @escaping VnshopSdk.ESRefreshHandler) -> VnshopSdk.ESRefreshFooterView
  public func removeRefreshHeader()
  public func removeRefreshFooter()
  public func startPullToRefresh()
  public func autoPullToRefresh()
  public func stopPullToRefresh(ignoreDate: Swift.Bool = false, ignoreFooter: Swift.Bool = false)
  public func noticeNoMoreData()
  public func resetNoMoreData()
  public func stopLoadingMore()
}
extension UIScrollView {
  public var refreshIdentifier: Swift.String? {
    get
    set(newValue)
  }
  public var expired: Swift.Bool {
    get
  }
  public var expiredTimeInterval: Foundation.TimeInterval? {
    get
    set(newValue)
  }
  public var lastRefreshDate: Foundation.Date? {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class ESRefreshHeaderView : VnshopSdk.ESRefreshComponent {
  open var lastRefreshTimestamp: Foundation.TimeInterval?
  open var refreshIdentifier: Swift.String?
  public convenience init(frame: CoreGraphics.CGRect, handler: @escaping VnshopSdk.ESRefreshHandler)
  @objc override dynamic open func didMoveToSuperview()
  override open func offsetChangeAction(object: Swift.AnyObject?, change: [Foundation.NSKeyValueChangeKey : Any]?)
  override open func start()
  override open func stop()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers open class ESRefreshFooterView : VnshopSdk.ESRefreshComponent {
  open var noMoreData: Swift.Bool {
    get
    set(value)
  }
  @objc override dynamic open var isHidden: Swift.Bool {
    @objc get
    @objc set(value)
  }
  public convenience init(frame: CoreGraphics.CGRect, handler: @escaping VnshopSdk.ESRefreshHandler)
  @objc override dynamic open func didMoveToSuperview()
  override open func sizeChangeAction(object: Swift.AnyObject?, change: [Foundation.NSKeyValueChangeKey : Any]?)
  override open func offsetChangeAction(object: Swift.AnyObject?, change: [Foundation.NSKeyValueChangeKey : Any]?)
  override open func start()
  override open func stop()
  open func noticeNoMoreData()
  open func resetNoMoreData()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
}
open class ESRefreshDataManager {
  open var lastRefreshInfo: [Swift.String : Foundation.Date]
  open var expiredTimeIntervalInfo: [Swift.String : Foundation.TimeInterval]
  required public init()
  open func date(forKey key: Swift.String) -> Foundation.Date?
  open func setDate(_ date: Foundation.Date?, forKey key: Swift.String)
  open func expiredTimeInterval(forKey key: Swift.String) -> Foundation.TimeInterval?
  open func setExpiredTimeInterval(_ interval: Foundation.TimeInterval?, forKey key: Swift.String)
  open func isExpired(forKey key: Swift.String) -> Swift.Bool
  open func isExpired(forKey key: Swift.String, block: ((Swift.Bool) -> ())?)
  public static func clearAll()
  public static func clearLastRefreshInfo()
  public static func clearExpiredTimeIntervalInfo()
  @objc deinit
}
open class ESRefreshAnimator : VnshopSdk.ESRefreshProtocol, VnshopSdk.ESRefreshAnimatorProtocol {
  open var view: UIKit.UIView
  open var insets: UIKit.UIEdgeInsets
  open var trigger: CoreGraphics.CGFloat
  open var executeIncremental: CoreGraphics.CGFloat
  open var state: VnshopSdk.ESRefreshViewState
  public init()
  open func refreshAnimationBegin(view: VnshopSdk.ESRefreshComponent)
  open func refreshAnimationWillEnd(view: VnshopSdk.ESRefreshComponent)
  open func refreshAnimationEnd(view: VnshopSdk.ESRefreshComponent)
  open func refresh(view: VnshopSdk.ESRefreshComponent, progressDidChange progress: CoreGraphics.CGFloat)
  open func refresh(view: VnshopSdk.ESRefreshComponent, stateDidChange state: VnshopSdk.ESRefreshViewState)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc final public class ThemeVisualEffectPicker : VnshopSdk.ThemePicker {
  public convenience init(keyPath: Swift.String)
  public convenience init(keyPath: Swift.String, map: @escaping (Any?) -> UIKit.UIVisualEffect?)
  public convenience init(effects: UIKit.UIVisualEffect...)
  required public convenience init(arrayLiteral elements: UIKit.UIVisualEffect...)
  required public convenience init(stringLiteral value: Swift.String)
  required public convenience init(unicodeScalarLiteral value: Swift.String)
  required public convenience init(extendedGraphemeClusterLiteral value: Swift.String)
  @objc deinit
  required public init(v: @escaping VnshopSdk.ThemePicker.ValueType)
}
extension ThemeVisualEffectPicker {
  final public class func pickerWithKeyPath(_ keyPath: Swift.String, map: @escaping (Any?) -> UIKit.UIVisualEffect?) -> VnshopSdk.ThemeVisualEffectPicker
  final public class func pickerWithEffects(_ styles: [UIKit.UIVisualEffect]) -> VnshopSdk.ThemeVisualEffectPicker
}
@objc extension ThemeVisualEffectPicker {
  @objc final public class func pickerWithKeyPath(_ keyPath: Swift.String) -> VnshopSdk.ThemeVisualEffectPicker
  @objc final public class func pickerWithStringEffects(_ effects: [Swift.String]) -> VnshopSdk.ThemeVisualEffectPicker
}
extension ThemeVisualEffectPicker : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = UIKit.UIVisualEffect
}
extension ThemeVisualEffectPicker : Swift.ExpressibleByStringLiteral {
  public typealias StringLiteralType = Swift.String
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
public typealias ESRefreshHandler = (() -> ())
@objc @_inheritsConvenienceInitializers open class ESRefreshComponent : UIKit.UIView {
  weak open var scrollView: UIKit.UIScrollView?
  open var handler: VnshopSdk.ESRefreshHandler?
  open var animator: (VnshopSdk.ESRefreshAnimatorProtocol & VnshopSdk.ESRefreshProtocol)!
  open var isRefreshing: Swift.Bool {
    get
  }
  open var isAutoRefreshing: Swift.Bool {
    get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  public convenience init(frame: CoreGraphics.CGRect, handler: @escaping VnshopSdk.ESRefreshHandler)
  public convenience init(frame: CoreGraphics.CGRect, handler: @escaping VnshopSdk.ESRefreshHandler, animator: VnshopSdk.ESRefreshAnimatorProtocol & VnshopSdk.ESRefreshProtocol)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic open func willMove(toSuperview newSuperview: UIKit.UIView?)
  @objc override dynamic open func didMoveToSuperview()
  final public func startRefreshing(isAuto: Swift.Bool = false)
  final public func stopRefreshing()
  public func start()
  public func stop()
  public func sizeChangeAction(object: Swift.AnyObject?, change: [Foundation.NSKeyValueChangeKey : Any]?)
  public func offsetChangeAction(object: Swift.AnyObject?, change: [Foundation.NSKeyValueChangeKey : Any]?)
}
extension ESRefreshComponent {
  public func ignoreObserver(_ ignore: Swift.Bool = false)
  @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
public enum ESRefreshViewState {
  case pullToRefresh
  case releaseToRefresh
  case refreshing
  case autoRefreshing
  case noMoreData
  public static func == (a: VnshopSdk.ESRefreshViewState, b: VnshopSdk.ESRefreshViewState) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol ESRefreshProtocol {
  mutating func refreshAnimationBegin(view: VnshopSdk.ESRefreshComponent)
  mutating func refreshAnimationEnd(view: VnshopSdk.ESRefreshComponent)
  mutating func refresh(view: VnshopSdk.ESRefreshComponent, progressDidChange progress: CoreGraphics.CGFloat)
  mutating func refresh(view: VnshopSdk.ESRefreshComponent, stateDidChange state: VnshopSdk.ESRefreshViewState)
}
public protocol ESRefreshAnimatorProtocol {
  var view: UIKit.UIView { get }
  var insets: UIKit.UIEdgeInsets { get set }
  var trigger: CoreGraphics.CGFloat { get set }
  var executeIncremental: CoreGraphics.CGFloat { get set }
  var state: VnshopSdk.ESRefreshViewState { get set }
}
public protocol ESRefreshImpactProtocol {
}
extension ESRefreshImpactProtocol {
  public func impact()
}
public protocol RangeSeekSliderDelegate : AnyObject {
  func rangeSeekSlider(_ slider: VnshopSdk.RangeSeekSlider, didChange minValue: CoreGraphics.CGFloat, maxValue: CoreGraphics.CGFloat)
  func didStartTouches(in slider: VnshopSdk.RangeSeekSlider)
  func didEndTouches(in slider: VnshopSdk.RangeSeekSlider)
  func rangeSeekSlider(_ slider: VnshopSdk.RangeSeekSlider, stringForMinValue minValue: CoreGraphics.CGFloat) -> Swift.String?
  func rangeSeekSlider(_ slider: VnshopSdk.RangeSeekSlider, stringForMaxValue: CoreGraphics.CGFloat) -> Swift.String?
}
extension RangeSeekSliderDelegate {
  public func rangeSeekSlider(_ slider: VnshopSdk.RangeSeekSlider, didChange minValue: CoreGraphics.CGFloat, maxValue: CoreGraphics.CGFloat)
  public func didStartTouches(in slider: VnshopSdk.RangeSeekSlider)
  public func didEndTouches(in slider: VnshopSdk.RangeSeekSlider)
  public func rangeSeekSlider(_ slider: VnshopSdk.RangeSeekSlider, stringForMinValue minValue: CoreGraphics.CGFloat) -> Swift.String?
  public func rangeSeekSlider(_ slider: VnshopSdk.RangeSeekSlider, stringForMaxValue maxValue: CoreGraphics.CGFloat) -> Swift.String?
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class RangeSeekSlider : UIKit.UIControl {
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override required dynamic public init(frame: CoreGraphics.CGRect)
  public convenience init(frame: CoreGraphics.CGRect = .zero, completion: ((VnshopSdk.RangeSeekSlider) -> Swift.Void)? = nil)
  weak open var delegate: VnshopSdk.RangeSeekSliderDelegate?
  @objc @IBInspectable open var minValue: CoreGraphics.CGFloat {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable open var maxValue: CoreGraphics.CGFloat {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable open var selectedMinValue: CoreGraphics.CGFloat {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable open var selectedMaxValue: CoreGraphics.CGFloat {
    @objc get
    @objc set(value)
  }
  open var minLabelFont: UIKit.UIFont {
    get
    set(value)
  }
  open var maxLabelFont: UIKit.UIFont {
    get
    set(value)
  }
  open var numberFormatter: Foundation.NumberFormatter
  @objc @IBInspectable open var hideLabels: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable open var labelsFixed: Swift.Bool
  @objc @IBInspectable open var minDistance: CoreGraphics.CGFloat {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable open var maxDistance: CoreGraphics.CGFloat {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable open var minLabelColor: UIKit.UIColor?
  @objc @IBInspectable open var maxLabelColor: UIKit.UIColor?
  @objc @IBInspectable open var handleColor: UIKit.UIColor?
  @objc @IBInspectable open var handleBorderColor: UIKit.UIColor?
  @objc @IBInspectable open var colorBetweenHandles: UIKit.UIColor?
  @objc @IBInspectable open var initialColor: UIKit.UIColor?
  @objc @IBInspectable open var disableRange: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable open var enableStep: Swift.Bool
  @objc @IBInspectable open var step: CoreGraphics.CGFloat
  @objc @IBInspectable open var handleImage: UIKit.UIImage? {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable open var handleDiameter: CoreGraphics.CGFloat {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable open var selectedHandleDiameterMultiplier: CoreGraphics.CGFloat
  @objc @IBInspectable open var lineHeight: CoreGraphics.CGFloat {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable open var handleBorderWidth: CoreGraphics.CGFloat {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable open var labelPadding: CoreGraphics.CGFloat {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable open var minLabelAccessibilityLabel: Swift.String?
  @objc @IBInspectable open var maxLabelAccessibilityLabel: Swift.String?
  @objc @IBInspectable open var minLabelAccessibilityHint: Swift.String?
  @objc @IBInspectable open var maxLabelAccessibilityHint: Swift.String?
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic open func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc override dynamic open func continueTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc override dynamic open func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
  open func setupStyle()
  @objc deinit
}
public protocol DPinViewDelegate : AnyObject {
  func entryChanged(_ completed: Swift.Bool)
  func entryCompleted(with entry: Swift.String?)
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class DPinView : UIKit.UIView {
  @objc @IBInspectable open var length: Swift.Int {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable open var spacing: CoreGraphics.CGFloat {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable open var entryCornerRadius: CoreGraphics.CGFloat {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable open var entryBorderWidth: CoreGraphics.CGFloat {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable open var entryDefaultBorderColor: UIKit.UIColor {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable open var entryBorderColor: UIKit.UIColor {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable open var entryEditingBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable open var entryErrorBorderColor: UIKit.UIColor
  @objc @IBInspectable open var entryBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable open var entryTextColor: UIKit.UIColor {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable open var entryFont: UIKit.UIFont {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable open var isSecure: Swift.Bool
  @objc @IBInspectable open var secureCharacter: Swift.String
  @objc @IBInspectable open var keyboardType: Swift.Int
  open var textContentType: UIKit.UITextContentType? {
    get
    set(value)
  }
  open var textFieldCapitalization: UIKit.UITextAutocapitalizationType? {
    get
    set(value)
  }
  public enum AllowedEntryTypes : Swift.String {
    case any
    case numerical
    case alphanumeric
    case letters
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  open var allowedEntryTypes: VnshopSdk.DPinView.AllowedEntryTypes
  @objc @IBInspectable open var isUnderlined: Swift.Bool {
    @objc get
    @objc set(value)
  }
  open var errorMode: Swift.Bool
  weak public var delegate: VnshopSdk.DPinViewDelegate?
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func awakeFromNib()
  @objc override dynamic open func prepareForInterfaceBuilder()
  open func setError(isError: Swift.Bool)
  open func clearEntry()
  open func getPinAsInt() -> Swift.Int?
  open func getPinAsString() -> Swift.String
  @discardableResult
  @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @discardableResult
  @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @objc deinit
}
extension DPinView : UIKit.UITextFieldDelegate {
  @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
}
extension DPinView {
  public func animateFailure(_ completion: (() -> Swift.Void)? = nil)
}
@_hasMissingDesignatedInitializers open class TapticEngine {
  public static var impact: VnshopSdk.TapticEngine.Impact
  public static var selection: VnshopSdk.TapticEngine.Selection
  public static var notification: VnshopSdk.TapticEngine.Notification
  @_hasMissingDesignatedInitializers open class Impact {
    public enum ImpactStyle {
      case light
      case medium
      case heavy
      public static func == (a: VnshopSdk.TapticEngine.Impact.ImpactStyle, b: VnshopSdk.TapticEngine.Impact.ImpactStyle) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
    }
    public func feedback(_ style: VnshopSdk.TapticEngine.Impact.ImpactStyle)
    public func prepare(_ style: VnshopSdk.TapticEngine.Impact.ImpactStyle)
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class Selection {
    public func feedback()
    public func prepare()
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class Notification {
    public enum NotificationType {
      case success
      case warning
      case error
      public static func == (a: VnshopSdk.TapticEngine.Notification.NotificationType, b: VnshopSdk.TapticEngine.Notification.NotificationType) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
    }
    public func feedback(_ type: VnshopSdk.TapticEngine.Notification.NotificationType)
    public func prepare()
    @objc deinit
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IQTextView : UIKit.UITextView {
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect, textContainer: UIKit.NSTextContainer?)
  @objc override dynamic open func awakeFromNib()
  @objc deinit
  @objc @IBInspectable open var placeholderTextColor: UIKit.UIColor? {
    @objc get
    @objc set(newValue)
  }
  @objc @IBInspectable open var placeholder: Swift.String? {
    @objc get
    @objc set(newValue)
  }
  open var attributedPlaceholder: Foundation.NSAttributedString? {
    get
    set(newValue)
  }
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open var text: Swift.String! {
    @objc get
    @objc set(value)
  }
  @objc override dynamic open var attributedText: Foundation.NSAttributedString! {
    @objc get
    @objc set(value)
  }
  @objc override dynamic open var font: UIKit.UIFont? {
    @objc get
    @objc set(value)
  }
  @objc override dynamic open var textAlignment: UIKit.NSTextAlignment {
    @objc get
    @objc set(value)
  }
  @objc override dynamic open var delegate: UIKit.UITextViewDelegate? {
    @objc get
    @objc set(newValue)
  }
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc public class IQPreviousNextView : UIKit.UIView {
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class IQTitleBarButtonItem : VnshopSdk.IQBarButtonItem {
  @objc open var titleFont: UIKit.UIFont? {
    @objc get
    @objc set(value)
  }
  @objc override dynamic open var title: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc open var titleColor: UIKit.UIColor? {
    @objc get
    @objc set(value)
  }
  @objc open var selectableTitleColor: UIKit.UIColor? {
    @objc get
    @objc set(value)
  }
  @objc override open var invocation: VnshopSdk.IQInvocation? {
    @objc get
    @objc set(value)
  }
  @objc public convenience init(title: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @objcMembers final public class SwipeBackController : ObjectiveC.NSObject {
  @objc final public var onStartTransition: ((UIKit.UIViewControllerContextTransitioning) -> Swift.Void)?
  @objc final public var onFinishTransition: ((UIKit.UIViewControllerContextTransitioning) -> Swift.Void)?
  @objc final public var isEnabled: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc required public init(navigationController: UIKit.UINavigationController)
  @objc deinit
  @objc final public func setNavigationControllerDelegate(_ delegate: UIKit.UINavigationControllerDelegate?)
  @objc final public func observePageViewController(_ pageViewController: UIKit.UIPageViewController, isFirstPage: @escaping () -> Swift.Bool)
  @objc override dynamic public init()
}
extension SwipeBackController : UIKit.UIGestureRecognizerDelegate {
  @objc final public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc final public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
extension SwipeBackController : UIKit.UINavigationControllerDelegate {
  @objc final public func navigationController(_ navigationController: UIKit.UINavigationController, animationControllerFor operation: UIKit.UINavigationController.Operation, from fromVC: UIKit.UIViewController, to toVC: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @objc final public func navigationController(_ navigationController: UIKit.UINavigationController, interactionControllerFor animationController: UIKit.UIViewControllerAnimatedTransitioning) -> UIKit.UIViewControllerInteractiveTransitioning?
  @objc final public func navigationController(_ navigationController: UIKit.UINavigationController, willShow viewController: UIKit.UIViewController, animated: Swift.Bool)
  @objc final public func navigationController(_ navigationController: UIKit.UINavigationController, didShow viewController: UIKit.UIViewController, animated: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers open class IQBarButtonItem : UIKit.UIBarButtonItem {
  @objc override dynamic public init()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open var tintColor: UIKit.UIColor? {
    @objc get
    @objc set(value)
  }
  @objc open func setTarget(_ target: Swift.AnyObject?, action: ObjectiveC.Selector?)
  @objc open var invocation: VnshopSdk.IQInvocation?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class IQToolbar : UIKit.UIToolbar, UIKit.UIInputViewAudioFeedback {
  @objc open var previousBarButton: VnshopSdk.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc open var nextBarButton: VnshopSdk.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc open var titleBarButton: VnshopSdk.IQTitleBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc open var doneBarButton: VnshopSdk.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc open var fixedSpaceBarButton: VnshopSdk.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func sizeThatFits(_ size: CoreGraphics.CGSize) -> CoreGraphics.CGSize
  @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set(value)
  }
  @objc override dynamic open func layoutSubviews()
  @objc open var enableInputClicksWhenVisible: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc public class IQBarButtonItemConfiguration : ObjectiveC.NSObject {
  @objc public init(barButtonSystemItem: UIKit.UIBarButtonItem.SystemItem, action: ObjectiveC.Selector)
  @objc public init(image: UIKit.UIImage, action: ObjectiveC.Selector)
  @objc public init(title: Swift.String, action: ObjectiveC.Selector)
  final public let barButtonSystemItem: UIKit.UIBarButtonItem.SystemItem?
  @objc final public let image: UIKit.UIImage?
  @objc final public let title: Swift.String?
  @objc final public let action: ObjectiveC.Selector?
  @objc deinit
  @objc override dynamic public init()
}
@objc extension UIImage {
  @objc public static func keyboardPreviousiOS9Image() -> UIKit.UIImage?
  @objc public static func keyboardNextiOS9Image() -> UIKit.UIImage?
  @objc public static func keyboardPreviousiOS10Image() -> UIKit.UIImage?
  @objc public static func keyboardNextiOS10Image() -> UIKit.UIImage?
  @objc public static func keyboardPreviousImage() -> UIKit.UIImage?
  @objc public static func keyboardNextImage() -> UIKit.UIImage?
}
@objc extension UIView {
  @objc dynamic public var keyboardToolbar: VnshopSdk.IQToolbar {
    @objc get
  }
  @objc dynamic public var shouldHideToolbarPlaceholder: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var toolbarPlaceholder: Swift.String? {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var drawingToolbarPlaceholder: Swift.String? {
    @objc get
  }
  @objc dynamic public func addKeyboardToolbarWithTarget(target: Swift.AnyObject?, titleText: Swift.String?, rightBarButtonConfiguration: VnshopSdk.IQBarButtonItemConfiguration?, previousBarButtonConfiguration: VnshopSdk.IQBarButtonItemConfiguration? = nil, nextBarButtonConfiguration: VnshopSdk.IQBarButtonItemConfiguration? = nil)
  @objc dynamic public func addDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, action: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc dynamic public func addDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, action: ObjectiveC.Selector, titleText: Swift.String?)
  @objc dynamic public func addRightButtonOnKeyboardWithImage(_ image: UIKit.UIImage, target: Swift.AnyObject?, action: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc dynamic public func addRightButtonOnKeyboardWithImage(_ image: UIKit.UIImage, target: Swift.AnyObject?, action: ObjectiveC.Selector, titleText: Swift.String?)
  @objc dynamic public func addRightButtonOnKeyboardWithText(_ text: Swift.String, target: Swift.AnyObject?, action: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc dynamic public func addRightButtonOnKeyboardWithText(_ text: Swift.String, target: Swift.AnyObject?, action: ObjectiveC.Selector, titleText: Swift.String?)
  @objc dynamic public func addCancelDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, cancelAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonTitle: Swift.String, rightButtonTitle: Swift.String, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonImage: UIKit.UIImage, rightButtonImage: UIKit.UIImage, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc dynamic public func addCancelDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, cancelAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonTitle: Swift.String, rightButtonTitle: Swift.String, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonImage: UIKit.UIImage, rightButtonImage: UIKit.UIImage, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc dynamic public func addPreviousNextDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonImage: UIKit.UIImage, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonTitle: Swift.String, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc dynamic public func addPreviousNextDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonImage: UIKit.UIImage, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonTitle: Swift.String, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?)
}
@objc public class IQInvocation : ObjectiveC.NSObject {
  @objc weak public var target: Swift.AnyObject?
  @objc public var action: ObjectiveC.Selector
  @objc public init(_ target: Swift.AnyObject, _ action: ObjectiveC.Selector)
  @objc public func invoke(from: Any)
  @objc deinit
  @objc override dynamic public init()
}
@objc public enum IQAutoToolbarManageBehaviour : Swift.Int {
  case bySubviews
  case byTag
  case byPosition
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum IQPreviousNextDisplayMode : Swift.Int {
  case `default`
  case alwaysHide
  case alwaysShow
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum IQEnableMode : Swift.Int {
  case `default`
  case enabled
  case disabled
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class IQKeyboardReturnKeyHandler : ObjectiveC.NSObject, UIKit.UITextFieldDelegate, UIKit.UITextViewDelegate {
  @objc weak public var delegate: (UIKit.UITextFieldDelegate & UIKit.UITextViewDelegate)?
  @objc public var lastTextFieldReturnKeyType: UIKit.UIReturnKeyType {
    @objc get
    @objc set(value)
  }
  @objc override dynamic public init()
  @objc public init(controller: UIKit.UIViewController)
  @objc deinit
  @objc public func addTextFieldView(_ view: UIKit.UIView)
  @objc public func removeTextFieldView(_ view: UIKit.UIView)
  @objc public func addResponderFromView(_ view: UIKit.UIView)
  @objc public func removeResponderFromView(_ view: UIKit.UIView)
  @objc public func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc public func textFieldShouldEndEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @available(iOS 10.0, *)
  @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField, reason: UIKit.UITextField.DidEndEditingReason)
  @objc public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @objc public func textFieldShouldClear(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc public func textViewShouldBeginEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @objc public func textViewShouldEndEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @objc public func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @objc public func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @objc public func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @objc public func textViewDidChange(_ textView: UIKit.UITextView)
  @objc public func textViewDidChangeSelection(_ textView: UIKit.UITextView)
  @available(iOS 10.0, *)
  @objc public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @available(iOS 10.0, *)
  @objc public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith textAttachment: UIKit.NSTextAttachment, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @available(iOS, deprecated: 10.0)
  @objc public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange) -> Swift.Bool
  @available(iOS, deprecated: 10.0)
  @objc public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith textAttachment: UIKit.NSTextAttachment, in characterRange: Foundation.NSRange) -> Swift.Bool
}
extension String : DifferenceKit.Differentiable {
  public typealias DifferenceIdentifier = Swift.String
}
extension ContentIdentifiable where Self : DifferenceKit.ContentEquatable {
  public func toAnyDifferentiable() -> DifferenceKit.AnyDifferentiable
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class IQKeyboardManager : ObjectiveC.NSObject, UIKit.UIGestureRecognizerDelegate {
  @objc public var enable: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc public var keyboardDistanceFromTextField: CoreGraphics.CGFloat {
    @objc get
    @objc set(newValue)
  }
  @objc public var keyboardShowing: Swift.Bool {
    @objc get
  }
  @objc public var movedDistance: CoreGraphics.CGFloat {
    @objc get
  }
  @objc public class var shared: VnshopSdk.IQKeyboardManager {
    @objc get
  }
  @objc public var enableAutoToolbar: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc public var toolbarManageBehaviour: VnshopSdk.IQAutoToolbarManageBehaviour
  @objc public var shouldToolbarUsesTextFieldTintColor: Swift.Bool
  @objc public var toolbarTintColor: UIKit.UIColor?
  @objc public var toolbarBarTintColor: UIKit.UIColor?
  @objc public var previousNextDisplayMode: VnshopSdk.IQPreviousNextDisplayMode
  @objc public var toolbarPreviousBarButtonItemImage: UIKit.UIImage?
  @objc public var toolbarNextBarButtonItemImage: UIKit.UIImage?
  @objc public var toolbarDoneBarButtonItemImage: UIKit.UIImage?
  @objc public var toolbarPreviousBarButtonItemText: Swift.String?
  @objc public var toolbarNextBarButtonItemText: Swift.String?
  @objc public var toolbarDoneBarButtonItemText: Swift.String?
  @objc public var shouldShowToolbarPlaceholder: Swift.Bool
  @objc public var placeholderFont: UIKit.UIFont?
  @objc public var placeholderColor: UIKit.UIColor?
  @objc public var placeholderButtonColor: UIKit.UIColor?
  @objc public var overrideKeyboardAppearance: Swift.Bool
  @objc public var keyboardAppearance: UIKit.UIKeyboardAppearance
  @objc public var shouldResignOnTouchOutside: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc public var resignFirstResponderGesture: UIKit.UITapGestureRecognizer {
    @objc get
    @objc set(value)
  }
  @discardableResult
  @objc public func resignFirstResponder() -> Swift.Bool
  @objc public var canGoPrevious: Swift.Bool {
    @objc get
  }
  @objc public var canGoNext: Swift.Bool {
    @objc get
  }
  @discardableResult
  @objc public func goPrevious() -> Swift.Bool
  @discardableResult
  @objc public func goNext() -> Swift.Bool
  @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
  @objc public var shouldPlayInputClicks: Swift.Bool
  @objc public var layoutIfNeededOnUpdate: Swift.Bool
  @objc public var disabledDistanceHandlingClasses: [UIKit.UIViewController.Type]
  @objc public var enabledDistanceHandlingClasses: [UIKit.UIViewController.Type]
  @objc public var disabledToolbarClasses: [UIKit.UIViewController.Type]
  @objc public var enabledToolbarClasses: [UIKit.UIViewController.Type]
  @objc public var toolbarPreviousNextAllowedClasses: [UIKit.UIView.Type]
  @objc public var disabledTouchResignedClasses: [UIKit.UIViewController.Type]
  @objc public var enabledTouchResignedClasses: [UIKit.UIViewController.Type]
  @objc public var touchResignedGestureIgnoreClasses: [UIKit.UIView.Type]
  @objc public func registerTextFieldViewClass(_ aClass: UIKit.UIView.Type, didBeginEditingNotificationName: Swift.String, didEndEditingNotificationName: Swift.String)
  @objc public func unregisterTextFieldViewClass(_ aClass: UIKit.UIView.Type, didBeginEditingNotificationName: Swift.String, didEndEditingNotificationName: Swift.String)
  @objc deinit
  @objc public func reloadLayoutIfNeeded()
  @objc public func reloadInputViews()
  @objc public var enableDebugging: Swift.Bool
  @objc public func registerAllNotifications()
  @objc public func unregisterAllNotifications()
}
extension ThemeManager {
  final public class func colorElement(for array: [Swift.String]) -> UIKit.UIColor?
  final public class func imageElement(for array: [Swift.String]) -> UIKit.UIImage?
  final public class func element<T>(for array: [T]) -> T?
}
@objc extension UIScrollView {
  @objc dynamic public var shouldIgnoreScrollingAdjustment: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var shouldRestoreScrollViewContentOffset: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
}
@objc extension UIViewController {
  @available(*, deprecated, message: "Due to change in core-logic of handling distance between textField and keyboard distance, this layout contraint tweak is no longer needed and things will just work out of the box regardless of constraint pinned with safeArea/layoutGuide/superview.")
  @IBOutlet @objc dynamic public var IQLayoutGuideConstraint: UIKit.NSLayoutConstraint? {
    @objc get
    @objc set(newValue)
  }
}
public var kIQUseDefaultKeyboardDistance: CoreGraphics.CGFloat
@objc extension UIView {
  @objc dynamic public var keyboardDistanceFromTextField: CoreGraphics.CGFloat {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var ignoreSwitchingByNextPrevious: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc dynamic public var shouldResignOnTouchOutsideMode: VnshopSdk.IQEnableMode {
    @objc get
    @objc set(newValue)
  }
}
@objc extension UIView {
  @objc dynamic public func viewContainingController() -> UIKit.UIViewController?
  @objc dynamic public func topMostController() -> UIKit.UIViewController?
  @objc dynamic public func parentContainerViewController() -> UIKit.UIViewController?
  @objc dynamic public func superviewOfClassType(_ classType: UIKit.UIView.Type, belowView: UIKit.UIView? = nil) -> UIKit.UIView?
}
@objc extension UIViewController {
  @objc dynamic public func parentIQContainerViewController() -> UIKit.UIViewController?
}
extension CAPSPageMenu : UIKit.UIGestureRecognizerDelegate {
}
@_inheritsConvenienceInitializers @objc final public class ThemeStringAttributesPicker : VnshopSdk.ThemePicker {
  public convenience init(keyPath: Swift.String, map: @escaping (Any?) -> [Foundation.NSAttributedString.Key : Any]?)
  public convenience init(_ attributes: [Foundation.NSAttributedString.Key : Any]...)
  required public convenience init(arrayLiteral elements: [Foundation.NSAttributedString.Key : Any]...)
  @objc deinit
  required public init(v: @escaping VnshopSdk.ThemePicker.ValueType)
}
@objc extension ThemeStringAttributesPicker {
  @objc final public class func pickerWithKeyPath(_ keyPath: Swift.String, map: @escaping (Any?) -> [Foundation.NSAttributedString.Key : Any]?) -> VnshopSdk.ThemeStringAttributesPicker
  @objc final public class func pickerWithAttributes(_ attributes: [[Foundation.NSAttributedString.Key : Any]]) -> VnshopSdk.ThemeStringAttributesPicker
}
extension ThemeStringAttributesPicker : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = [Foundation.NSAttributedString.Key : Any]
}
public enum CAPSPageMenuOption {
  case selectionIndicatorHeight(CoreGraphics.CGFloat)
  case menuItemSeparatorWidth(CoreGraphics.CGFloat)
  case scrollMenuBackgroundColor(UIKit.UIColor)
  case viewBackgroundColor(UIKit.UIColor)
  case bottomMenuHairlineColor(UIKit.UIColor)
  case selectionIndicatorColor(UIKit.UIColor)
  case menuItemSeparatorColor(UIKit.UIColor)
  case menuMargin(CoreGraphics.CGFloat)
  case menuItemMargin(CoreGraphics.CGFloat)
  case menuHeight(CoreGraphics.CGFloat)
  case selectedMenuItemLabelColor(UIKit.UIColor)
  case unselectedMenuItemLabelColor(UIKit.UIColor)
  case useMenuLikeSegmentedControl(Swift.Bool)
  case menuItemSeparatorRoundEdges(Swift.Bool)
  case menuItemFont(UIKit.UIFont)
  case menuItemSeparatorPercentageHeight(CoreGraphics.CGFloat)
  case menuItemWidth(CoreGraphics.CGFloat)
  case enableHorizontalBounce(Swift.Bool)
  case addBottomMenuHairline(Swift.Bool)
  case menuItemWidthBasedOnTitleTextWidth(Swift.Bool)
  case titleTextSizeBasedOnMenuItemWidth(Swift.Bool)
  case scrollAnimationDurationOnMenuItemTap(Swift.Int)
  case centerMenuItems(Swift.Bool)
  case hideTopMenuBar(Swift.Bool)
  case addWidthForMenuItemWidthBaseOnTitleTextWidth(CoreGraphics.CGFloat)
  case isShowMenuItemWithBadge(Swift.Bool)
  case badgeWidth(CoreGraphics.CGFloat)
}
extension CAPSPageMenu : UIKit.UIScrollViewDelegate {
  @objc dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc dynamic open func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
}
public class CAPSPageMenuConfiguration {
  open var menuHeight: CoreGraphics.CGFloat
  open var menuMargin: CoreGraphics.CGFloat
  open var menuItemWidth: CoreGraphics.CGFloat
  open var addWidthForMenuItemWidthBaseOnTitleTextWidth: CoreGraphics.CGFloat
  open var selectionIndicatorHeight: CoreGraphics.CGFloat
  open var scrollAnimationDurationOnMenuItemTap: Swift.Int
  open var selectionIndicatorColor: UIKit.UIColor
  open var selectedMenuItemLabelColor: UIKit.UIColor
  open var unselectedMenuItemLabelColor: UIKit.UIColor
  open var scrollMenuBackgroundColor: UIKit.UIColor
  open var viewBackgroundColor: UIKit.UIColor
  open var bottomMenuHairlineColor: UIKit.UIColor
  open var menuItemSeparatorColor: UIKit.UIColor
  open var menuItemFont: UIKit.UIFont
  open var menuItemSeparatorPercentageHeight: CoreGraphics.CGFloat
  open var menuItemSeparatorWidth: CoreGraphics.CGFloat
  open var menuItemSeparatorRoundEdges: Swift.Bool
  open var addBottomMenuHairline: Swift.Bool
  open var menuItemWidthBasedOnTitleTextWidth: Swift.Bool
  open var titleTextSizeBasedOnMenuItemWidth: Swift.Bool
  open var useMenuLikeSegmentedControl: Swift.Bool
  open var centerMenuItems: Swift.Bool
  open var enableHorizontalBounce: Swift.Bool
  open var hideTopMenuBar: Swift.Bool
  open var isShowMenuItemWithBadge: Swift.Bool
  open var badgeWidth: CoreGraphics.CGFloat
  public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc final public class ThemeStatusBarStylePicker : VnshopSdk.ThemePicker {
  public convenience init(keyPath: Swift.String)
  public convenience init(keyPath: Swift.String, map: @escaping (Any?) -> UIKit.UIStatusBarStyle?)
  public convenience init(styles: UIKit.UIStatusBarStyle...)
  required public convenience init(arrayLiteral elements: UIKit.UIStatusBarStyle...)
  required public convenience init(stringLiteral value: Swift.String)
  required public convenience init(unicodeScalarLiteral value: Swift.String)
  required public convenience init(extendedGraphemeClusterLiteral value: Swift.String)
  @objc deinit
  required public init(v: @escaping VnshopSdk.ThemePicker.ValueType)
}
extension ThemeStatusBarStylePicker {
  final public class func pickerWithKeyPath(_ keyPath: Swift.String, map: @escaping (Any?) -> UIKit.UIStatusBarStyle?) -> VnshopSdk.ThemeStatusBarStylePicker
  final public class func pickerWithStyles(_ styles: [UIKit.UIStatusBarStyle]) -> VnshopSdk.ThemeStatusBarStylePicker
}
@objc extension ThemeStatusBarStylePicker {
  @objc final public class func pickerWithKeyPath(_ keyPath: Swift.String) -> VnshopSdk.ThemeStatusBarStylePicker
  @objc final public class func pickerWithStringStyles(_ styles: [Swift.String]) -> VnshopSdk.ThemeStatusBarStylePicker
}
extension ThemeStatusBarStylePicker : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = UIKit.UIStatusBarStyle
}
extension ThemeStatusBarStylePicker : Swift.ExpressibleByStringLiteral {
  public typealias StringLiteralType = Swift.String
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
@objc public protocol CAPSPageMenuDelegate {
  @objc optional func willMoveToPage(_ controller: UIKit.UIViewController, index: Swift.Int)
  @objc optional func didMoveToPage(_ controller: UIKit.UIViewController, index: Swift.Int)
}
@objc open class CAPSPageMenu : UIKit.UIViewController {
  public var currentPageIndex: Swift.Int
  weak open var delegate: VnshopSdk.CAPSPageMenuDelegate?
  public init(viewControllers: [UIKit.UIViewController], frame: CoreGraphics.CGRect, options: [Swift.String : Swift.AnyObject]?)
  public convenience init(viewControllers: [UIKit.UIViewController], frame: CoreGraphics.CGRect, pageMenuOptions: [VnshopSdk.CAPSPageMenuOption]?)
  public init(viewControllers: [UIKit.UIViewController], frame: CoreGraphics.CGRect, configuration: VnshopSdk.CAPSPageMenuConfiguration)
  public init(viewControllers: [UIKit.UIViewController], in controller: UIKit.UIViewController, with configuration: VnshopSdk.CAPSPageMenuConfiguration, usingStoryboards: Swift.Bool = false)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension CAPSPageMenu {
  @objc override dynamic open func viewDidLayoutSubviews()
  open func moveToPage(_ index: Swift.Int, animated: Swift.Bool = true)
}
